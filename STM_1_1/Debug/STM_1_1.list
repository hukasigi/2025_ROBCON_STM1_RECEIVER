
STM_1_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006588  08006588  00007588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006608  08006608  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006608  08006608  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006610  08006610  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006610  08006610  00007610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006614  08006614  00007614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006618  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008068  2**0
                  CONTENTS
 10 .bss          00000360  20000068  20000068  00008068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  00008068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb06  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002051  00000000  00000000  00017b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00019bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af9  00000000  00000000  0001a9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c741  00000000  00000000  0001b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bd6  00000000  00000000  00037c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a8e96  00000000  00000000  00048808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f169e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042fc  00000000  00000000  000f16e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000f59e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006570 	.word	0x08006570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08006570 	.word	0x08006570

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <CAN_TX>:
/* USER CODE BEGIN 0 */

uint8_t use_data[8];
uint32_t id;
int i = 0;
void CAN_TX(uint32_t recipient) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	@ 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    //送信用インスタンス等
	CAN_TxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;
	uint8_t TxData[8];
    //送信メールボックスに空きがあったら送信開始
	if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan)) {
 8000278:	4820      	ldr	r0, [pc, #128]	@ (80002fc <CAN_TX+0x8c>)
 800027a:	f001 fb08 	bl	800188e <HAL_CAN_GetTxMailboxesFreeLevel>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d036      	beq.n	80002f2 <CAN_TX+0x82>
        //送信用インスタンスの設定
		TxHeader.StdId = recipient;// 受取手のCANのID
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	61bb      	str	r3, [r7, #24]
		TxHeader.RTR = CAN_RTR_DATA;
 8000288:	2300      	movs	r3, #0
 800028a:	627b      	str	r3, [r7, #36]	@ 0x24
		TxHeader.IDE = CAN_ID_STD;
 800028c:	2300      	movs	r3, #0
 800028e:	623b      	str	r3, [r7, #32]
		TxHeader.DLC = 8;//データ長を8byteに設定
 8000290:	2308      	movs	r3, #8
 8000292:	62bb      	str	r3, [r7, #40]	@ 0x28
		TxHeader.TransmitGlobalTime = DISABLE;
 8000294:	2300      	movs	r3, #0
 8000296:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        //各データ
		TxData[0] = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	733b      	strb	r3, [r7, #12]
		TxData[1] = 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	737b      	strb	r3, [r7, #13]
		TxData[2] = 2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	73bb      	strb	r3, [r7, #14]
		TxData[3] = 3;
 80002a6:	2303      	movs	r3, #3
 80002a8:	73fb      	strb	r3, [r7, #15]
		TxData[4] = 4;
 80002aa:	2304      	movs	r3, #4
 80002ac:	743b      	strb	r3, [r7, #16]
		TxData[5] = 5;
 80002ae:	2305      	movs	r3, #5
 80002b0:	747b      	strb	r3, [r7, #17]
		TxData[6] = 6;
 80002b2:	2306      	movs	r3, #6
 80002b4:	74bb      	strb	r3, [r7, #18]
		if(i == 10){
 80002b6:	4b12      	ldr	r3, [pc, #72]	@ (8000300 <CAN_TX+0x90>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b0a      	cmp	r3, #10
 80002bc:	d102      	bne.n	80002c4 <CAN_TX+0x54>
			i=0;
 80002be:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <CAN_TX+0x90>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
		}
		TxData[7] = i;
 80002c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000300 <CAN_TX+0x90>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	74fb      	strb	r3, [r7, #19]
        //CANメッセージを送信
		if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	f107 020c 	add.w	r2, r7, #12
 80002d4:	f107 0118 	add.w	r1, r7, #24
 80002d8:	4808      	ldr	r0, [pc, #32]	@ (80002fc <CAN_TX+0x8c>)
 80002da:	f001 fa08 	bl	80016ee <HAL_CAN_AddTxMessage>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <CAN_TX+0x78>
			Error_Handler();
 80002e4:	f000 fc8c 	bl	8000c00 <Error_Handler>
		}
		i++;
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <CAN_TX+0x90>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <CAN_TX+0x90>)
 80002f0:	6013      	str	r3, [r2, #0]
	}
}
 80002f2:	bf00      	nop
 80002f4:	3730      	adds	r7, #48	@ 0x30
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	20000084 	.word	0x20000084
 8000300:	20000270 	.word	0x20000270

08000304 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b08c      	sub	sp, #48	@ 0x30
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;//受信メッセージの情報が格納されるインスタンス
	uint8_t RxData[8];//受信したデータを一時保存する配列
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData)== HAL_OK) {
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	f107 0210 	add.w	r2, r7, #16
 8000314:	2100      	movs	r1, #0
 8000316:	6878      	ldr	r0, [r7, #4]
 8000318:	f001 faee 	bl	80018f8 <HAL_CAN_GetRxMessage>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d119      	bne.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		id = RxHeader.StdId; // RxHeaderの中に入っているidを取り出す
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000326:	6013      	str	r3, [r2, #0]
		if (id == 0x001){
 8000328:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b01      	cmp	r3, #1
 800032e:	d112      	bne.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
			for (int i = 0; i <= 7; i++){
 8000330:	2300      	movs	r3, #0
 8000332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000334:	e00c      	b.n	8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
    				use_data[i] = RxData[i];
 8000336:	f107 0208 	add.w	r2, r7, #8
 800033a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800033c:	4413      	add	r3, r2
 800033e:	7819      	ldrb	r1, [r3, #0]
 8000340:	4a08      	ldr	r2, [pc, #32]	@ (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000344:	4413      	add	r3, r2
 8000346:	460a      	mov	r2, r1
 8000348:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i <= 7; i++){
 800034a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800034c:	3301      	adds	r3, #1
 800034e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000352:	2b07      	cmp	r3, #7
 8000354:	ddef      	ble.n	8000336 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
			}
		}
	}
}
 8000356:	bf00      	nop
 8000358:	3730      	adds	r7, #48	@ 0x30
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	2000026c 	.word	0x2000026c
 8000364:	20000264 	.word	0x20000264

08000368 <_write>:

int _write(int file, char *ptr, int len)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	b29a      	uxth	r2, r3
 8000378:	230a      	movs	r3, #10
 800037a:	68b9      	ldr	r1, [r7, #8]
 800037c:	4803      	ldr	r0, [pc, #12]	@ (800038c <_write+0x24>)
 800037e:	f004 fd8f 	bl	8004ea0 <HAL_UART_Transmit>
  return len;
 8000382:	687b      	ldr	r3, [r7, #4]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3710      	adds	r7, #16
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200001dc 	.word	0x200001dc

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 ff18 	bl	80011c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f8be 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f000 fbd0 	bl	8000b40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003a0:	f000 fb9e 	bl	8000ae0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80003a4:	f000 f916 	bl	80005d4 <MX_CAN_Init>
  MX_TIM2_Init();
 80003a8:	f000 fa12 	bl	80007d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003ac:	f000 fa86 	bl	80008bc <MX_TIM3_Init>
  MX_TIM16_Init();
 80003b0:	f000 fb1c 	bl	80009ec <MX_TIM16_Init>
  MX_TIM1_Init();
 80003b4:	f000 f960 	bl	8000678 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	// CANスタート
	HAL_CAN_Start(&hcan);
 80003b8:	484e      	ldr	r0, [pc, #312]	@ (80004f4 <main+0x164>)
 80003ba:	f001 f954 	bl	8001666 <HAL_CAN_Start>
	// 割り込み有効
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80003be:	2102      	movs	r1, #2
 80003c0:	484c      	ldr	r0, [pc, #304]	@ (80004f4 <main+0x164>)
 80003c2:	f001 fbbb 	bl	8001b3c <HAL_CAN_ActivateNotification>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003c6:	2100      	movs	r1, #0
 80003c8:	484b      	ldr	r0, [pc, #300]	@ (80004f8 <main+0x168>)
 80003ca:	f003 fd07 	bl	8003ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80003ce:	2104      	movs	r1, #4
 80003d0:	484a      	ldr	r0, [pc, #296]	@ (80004fc <main+0x16c>)
 80003d2:	f003 fd03 	bl	8003ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003d6:	2104      	movs	r1, #4
 80003d8:	4849      	ldr	r0, [pc, #292]	@ (8000500 <main+0x170>)
 80003da:	f003 fcff 	bl	8003ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003de:	2108      	movs	r1, #8
 80003e0:	4847      	ldr	r0, [pc, #284]	@ (8000500 <main+0x170>)
 80003e2:	f003 fcfb 	bl	8003ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003e6:	2100      	movs	r1, #0
 80003e8:	4845      	ldr	r0, [pc, #276]	@ (8000500 <main+0x170>)
 80003ea:	f003 fcf7 	bl	8003ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003ee:	210c      	movs	r1, #12
 80003f0:	4843      	ldr	r0, [pc, #268]	@ (8000500 <main+0x170>)
 80003f2:	f003 fcf3 	bl	8003ddc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80003f6:	2100      	movs	r1, #0
 80003f8:	4842      	ldr	r0, [pc, #264]	@ (8000504 <main+0x174>)
 80003fa:	f003 fcef 	bl	8003ddc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  while (1)
	  {
	    /* USER CODE END WHILE */
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	2102      	movs	r1, #2
 8000402:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000406:	f002 f873 	bl	80024f0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 800040a:	4b3b      	ldr	r3, [pc, #236]	@ (80004f8 <main+0x168>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000412:	635a      	str	r2, [r3, #52]	@ 0x34

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000414:	2201      	movs	r2, #1
 8000416:	2108      	movs	r1, #8
 8000418:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800041c:	f002 f868 	bl	80024f0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000420:	4b37      	ldr	r3, [pc, #220]	@ (8000500 <main+0x170>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000428:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800042a:	2201      	movs	r2, #1
 800042c:	2102      	movs	r1, #2
 800042e:	4836      	ldr	r0, [pc, #216]	@ (8000508 <main+0x178>)
 8000430:	f002 f85e 	bl	80024f0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000434:	4b32      	ldr	r3, [pc, #200]	@ (8000500 <main+0x170>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800043c:	639a      	str	r2, [r3, #56]	@ 0x38

		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 800043e:	2201      	movs	r2, #1
 8000440:	2120      	movs	r1, #32
 8000442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000446:	f002 f853 	bl	80024f0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 800044a:	4b2d      	ldr	r3, [pc, #180]	@ (8000500 <main+0x170>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000452:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000454:	2201      	movs	r2, #1
 8000456:	2120      	movs	r1, #32
 8000458:	482b      	ldr	r0, [pc, #172]	@ (8000508 <main+0x178>)
 800045a:	f002 f849 	bl	80024f0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 800045e:	4b28      	ldr	r3, [pc, #160]	@ (8000500 <main+0x170>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000466:	639a      	str	r2, [r3, #56]	@ 0x38


		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000468:	2201      	movs	r2, #1
 800046a:	2180      	movs	r1, #128	@ 0x80
 800046c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000470:	f002 f83e 	bl	80024f0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 1000 - 500);
 8000474:	4b23      	ldr	r3, [pc, #140]	@ (8000504 <main+0x174>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800047c:	635a      	str	r2, [r3, #52]	@ 0x34

		  CAN_TX(0x001);
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff fef6 	bl	8000270 <CAN_TX>
	      printf("Receiver\r\n");
 8000484:	4821      	ldr	r0, [pc, #132]	@ (800050c <main+0x17c>)
 8000486:	f005 fa11 	bl	80058ac <puts>
	      printf("%d\r\n", use_data[0]);
 800048a:	4b21      	ldr	r3, [pc, #132]	@ (8000510 <main+0x180>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	4619      	mov	r1, r3
 8000490:	4820      	ldr	r0, [pc, #128]	@ (8000514 <main+0x184>)
 8000492:	f005 f9a3 	bl	80057dc <iprintf>
	      printf("%d\r\n", use_data[1]);
 8000496:	4b1e      	ldr	r3, [pc, #120]	@ (8000510 <main+0x180>)
 8000498:	785b      	ldrb	r3, [r3, #1]
 800049a:	4619      	mov	r1, r3
 800049c:	481d      	ldr	r0, [pc, #116]	@ (8000514 <main+0x184>)
 800049e:	f005 f99d 	bl	80057dc <iprintf>
	      printf("%d\r\n", use_data[2]);
 80004a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000510 <main+0x180>)
 80004a4:	789b      	ldrb	r3, [r3, #2]
 80004a6:	4619      	mov	r1, r3
 80004a8:	481a      	ldr	r0, [pc, #104]	@ (8000514 <main+0x184>)
 80004aa:	f005 f997 	bl	80057dc <iprintf>
	      printf("%d\r\n", use_data[3]);
 80004ae:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <main+0x180>)
 80004b0:	78db      	ldrb	r3, [r3, #3]
 80004b2:	4619      	mov	r1, r3
 80004b4:	4817      	ldr	r0, [pc, #92]	@ (8000514 <main+0x184>)
 80004b6:	f005 f991 	bl	80057dc <iprintf>
	      printf("%d\r\n", use_data[4]);
 80004ba:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <main+0x180>)
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	4619      	mov	r1, r3
 80004c0:	4814      	ldr	r0, [pc, #80]	@ (8000514 <main+0x184>)
 80004c2:	f005 f98b 	bl	80057dc <iprintf>
	      printf("%d\r\n", use_data[5]);
 80004c6:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <main+0x180>)
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4811      	ldr	r0, [pc, #68]	@ (8000514 <main+0x184>)
 80004ce:	f005 f985 	bl	80057dc <iprintf>
	      printf("%d\r\n", use_data[6]);
 80004d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <main+0x180>)
 80004d4:	799b      	ldrb	r3, [r3, #6]
 80004d6:	4619      	mov	r1, r3
 80004d8:	480e      	ldr	r0, [pc, #56]	@ (8000514 <main+0x184>)
 80004da:	f005 f97f 	bl	80057dc <iprintf>
	      printf("%d\r\n", use_data[7]);
 80004de:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <main+0x180>)
 80004e0:	79db      	ldrb	r3, [r3, #7]
 80004e2:	4619      	mov	r1, r3
 80004e4:	480b      	ldr	r0, [pc, #44]	@ (8000514 <main+0x184>)
 80004e6:	f005 f979 	bl	80057dc <iprintf>
	      HAL_Delay(100);
 80004ea:	2064      	movs	r0, #100	@ 0x64
 80004ec:	f000 fed2 	bl	8001294 <HAL_Delay>
	  {
 80004f0:	bf00      	nop
 80004f2:	e784      	b.n	80003fe <main+0x6e>
 80004f4:	20000084 	.word	0x20000084
 80004f8:	200000ac 	.word	0x200000ac
 80004fc:	200000f8 	.word	0x200000f8
 8000500:	20000144 	.word	0x20000144
 8000504:	20000190 	.word	0x20000190
 8000508:	48000400 	.word	0x48000400
 800050c:	08006588 	.word	0x08006588
 8000510:	20000264 	.word	0x20000264
 8000514:	08006594 	.word	0x08006594

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	@ 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000522:	2228      	movs	r2, #40	@ 0x28
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f005 faa0 	bl	8005a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 031c 	add.w	r3, r7, #28
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]
 800054a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054c:	2301      	movs	r3, #1
 800054e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000554:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055a:	2301      	movs	r3, #1
 800055c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000562:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000566:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000568:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800056c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000572:	4618      	mov	r0, r3
 8000574:	f001 ffd4 	bl	8002520 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800057e:	f000 fb3f 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2302      	movs	r3, #2
 8000588:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800058e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 ffcc 	bl	800353c <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 fb29 	bl	8000c00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80005ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 f9d0 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005c6:	f000 fb1b 	bl	8000c00 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	@ 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <MX_CAN_Init+0x9c>)
 80005dc:	4a25      	ldr	r2, [pc, #148]	@ (8000674 <MX_CAN_Init+0xa0>)
 80005de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80005e0:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <MX_CAN_Init+0x9c>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MX_CAN_Init+0x9c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <MX_CAN_Init+0x9c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_CAN_Init+0x9c>)
 80005f4:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 80005f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <MX_CAN_Init+0x9c>)
 80005fc:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000600:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000602:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_CAN_Init+0x9c>)
 8000604:	2200      	movs	r2, #0
 8000606:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000608:	4b19      	ldr	r3, [pc, #100]	@ (8000670 <MX_CAN_Init+0x9c>)
 800060a:	2200      	movs	r2, #0
 800060c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800060e:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_CAN_Init+0x9c>)
 8000610:	2200      	movs	r2, #0
 8000612:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <MX_CAN_Init+0x9c>)
 8000616:	2200      	movs	r2, #0
 8000618:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_CAN_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_CAN_Init+0x9c>)
 8000622:	2200      	movs	r2, #0
 8000624:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000626:	4812      	ldr	r0, [pc, #72]	@ (8000670 <MX_CAN_Init+0x9c>)
 8000628:	f000 fe58 	bl	80012dc <HAL_CAN_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000632:	f000 fae5 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef filter;
  filter.FilterIdHigh         = 0x001 << 5;                  // フィルターID1
 8000636:	2320      	movs	r3, #32
 8000638:	603b      	str	r3, [r7, #0]
  filter.FilterIdLow          = 0x002 << 5;                  // フィルターID2
 800063a:	2340      	movs	r3, #64	@ 0x40
 800063c:	607b      	str	r3, [r7, #4]
  filter.FilterMaskIdHigh     = 0x003 << 5;                  // フィルターID3
 800063e:	2360      	movs	r3, #96	@ 0x60
 8000640:	60bb      	str	r3, [r7, #8]
  filter.FilterMaskIdLow      = 0x004 << 5;    // フィルターID4
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	60fb      	str	r3, [r7, #12]
  filter.FilterScale          = CAN_FILTERSCALE_16BIT; // 16モード
 8000646:	2300      	movs	r3, #0
 8000648:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;      // FIFO0へ格納
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  filter.FilterBank           = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  filter.FilterMode           = CAN_FILTERMODE_IDLIST; // IDリストモード
 8000652:	2301      	movs	r3, #1
 8000654:	61bb      	str	r3, [r7, #24]
  filter.SlaveStartFilterBank = 14;
 8000656:	230e      	movs	r3, #14
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  filter.FilterActivation     = ENABLE;
 800065a:	2301      	movs	r3, #1
 800065c:	623b      	str	r3, [r7, #32]

  HAL_CAN_ConfigFilter(&hcan, &filter);
 800065e:	463b      	mov	r3, r7
 8000660:	4619      	mov	r1, r3
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <MX_CAN_Init+0x9c>)
 8000664:	f000 ff35 	bl	80014d2 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	@ 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000084 	.word	0x20000084
 8000674:	40006400 	.word	0x40006400

08000678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09a      	sub	sp, #104	@ 0x68
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000698:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	222c      	movs	r2, #44	@ 0x2c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 f9da 	bl	8005a6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b8:	4b43      	ldr	r3, [pc, #268]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006ba:	4a44      	ldr	r2, [pc, #272]	@ (80007cc <MX_TIM1_Init+0x154>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80006be:	4b42      	ldr	r3, [pc, #264]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006c0:	2240      	movs	r2, #64	@ 0x40
 80006c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b40      	ldr	r3, [pc, #256]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80006ca:	4b3f      	ldr	r3, [pc, #252]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b3d      	ldr	r3, [pc, #244]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d8:	4b3b      	ldr	r3, [pc, #236]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b3a      	ldr	r3, [pc, #232]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006e4:	4838      	ldr	r0, [pc, #224]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80006e6:	f003 fa5f 	bl	8003ba8 <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 fa86 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006fe:	4619      	mov	r1, r3
 8000700:	4831      	ldr	r0, [pc, #196]	@ (80007c8 <MX_TIM1_Init+0x150>)
 8000702:	f003 fde5 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800070c:	f000 fa78 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000710:	482d      	ldr	r0, [pc, #180]	@ (80007c8 <MX_TIM1_Init+0x150>)
 8000712:	f003 faa0 	bl	8003c56 <HAL_TIM_OC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800071c:	f000 fa70 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000730:	4619      	mov	r1, r3
 8000732:	4825      	ldr	r0, [pc, #148]	@ (80007c8 <MX_TIM1_Init+0x150>)
 8000734:	f004 fa80 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800073e:	f000 fa5f 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000742:	2300      	movs	r3, #0
 8000744:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074a:	2300      	movs	r3, #0
 800074c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800074e:	2300      	movs	r3, #0
 8000750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	4818      	ldr	r0, [pc, #96]	@ (80007c8 <MX_TIM1_Init+0x150>)
 8000768:	f003 fc24 	bl	8003fb4 <HAL_TIM_OC_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000772:	f000 fa45 	bl	8000c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800078a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800078e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000798:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800079c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80007ac:	f004 fab2 	bl	8004d14 <HAL_TIMEx_ConfigBreakDeadTime>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80007b6:	f000 fa23 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ba:	4803      	ldr	r0, [pc, #12]	@ (80007c8 <MX_TIM1_Init+0x150>)
 80007bc:	f000 faf0 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 80007c0:	bf00      	nop
 80007c2:	3768      	adds	r7, #104	@ 0x68
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000ac 	.word	0x200000ac
 80007cc:	40012c00 	.word	0x40012c00

080007d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	@ 0x38
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000802:	4b2d      	ldr	r3, [pc, #180]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000804:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000808:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800080a:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 800080c:	2240      	movs	r2, #64	@ 0x40
 800080e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000810:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000816:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000818:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800081c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000824:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800082a:	4823      	ldr	r0, [pc, #140]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 800082c:	f003 f9bc 	bl	8003ba8 <HAL_TIM_Base_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000836:	f000 f9e3 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000840:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000844:	4619      	mov	r1, r3
 8000846:	481c      	ldr	r0, [pc, #112]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000848:	f003 fd42 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000852:	f000 f9d5 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000856:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000858:	f003 fa5e 	bl	8003d18 <HAL_TIM_PWM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000862:	f000 f9cd 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4810      	ldr	r0, [pc, #64]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 8000876:	f004 f9df 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000880:	f000 f9be 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000884:	2360      	movs	r3, #96	@ 0x60
 8000886:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	2204      	movs	r2, #4
 8000898:	4619      	mov	r1, r3
 800089a:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 800089c:	f003 fc04 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008a6:	f000 f9ab 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008aa:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <MX_TIM2_Init+0xe8>)
 80008ac:	f000 fa78 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 80008b0:	bf00      	nop
 80008b2:	3738      	adds	r7, #56	@ 0x38
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000f8 	.word	0x200000f8

080008bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08e      	sub	sp, #56	@ 0x38
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008dc:	463b      	mov	r3, r7
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]
 80008ea:	615a      	str	r2, [r3, #20]
 80008ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ee:	4b3d      	ldr	r3, [pc, #244]	@ (80009e4 <MX_TIM3_Init+0x128>)
 80008f0:	4a3d      	ldr	r2, [pc, #244]	@ (80009e8 <MX_TIM3_Init+0x12c>)
 80008f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 80008f4:	4b3b      	ldr	r3, [pc, #236]	@ (80009e4 <MX_TIM3_Init+0x128>)
 80008f6:	2240      	movs	r2, #64	@ 0x40
 80008f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b3a      	ldr	r3, [pc, #232]	@ (80009e4 <MX_TIM3_Init+0x128>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000900:	4b38      	ldr	r3, [pc, #224]	@ (80009e4 <MX_TIM3_Init+0x128>)
 8000902:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000906:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <MX_TIM3_Init+0x128>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b35      	ldr	r3, [pc, #212]	@ (80009e4 <MX_TIM3_Init+0x128>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000914:	4833      	ldr	r0, [pc, #204]	@ (80009e4 <MX_TIM3_Init+0x128>)
 8000916:	f003 f947 	bl	8003ba8 <HAL_TIM_Base_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000920:	f000 f96e 	bl	8000c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000924:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800092a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800092e:	4619      	mov	r1, r3
 8000930:	482c      	ldr	r0, [pc, #176]	@ (80009e4 <MX_TIM3_Init+0x128>)
 8000932:	f003 fccd 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800093c:	f000 f960 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000940:	4828      	ldr	r0, [pc, #160]	@ (80009e4 <MX_TIM3_Init+0x128>)
 8000942:	f003 f9e9 	bl	8003d18 <HAL_TIM_PWM_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800094c:	f000 f958 	bl	8000c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4821      	ldr	r0, [pc, #132]	@ (80009e4 <MX_TIM3_Init+0x128>)
 8000960:	f004 f96a 	bl	8004c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800096a:	f000 f949 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800096e:	2360      	movs	r3, #96	@ 0x60
 8000970:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	4817      	ldr	r0, [pc, #92]	@ (80009e4 <MX_TIM3_Init+0x128>)
 8000986:	f003 fb8f 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000990:	f000 f936 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	2204      	movs	r2, #4
 8000998:	4619      	mov	r1, r3
 800099a:	4812      	ldr	r0, [pc, #72]	@ (80009e4 <MX_TIM3_Init+0x128>)
 800099c:	f003 fb84 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80009a6:	f000 f92b 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009aa:	463b      	mov	r3, r7
 80009ac:	2208      	movs	r2, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <MX_TIM3_Init+0x128>)
 80009b2:	f003 fb79 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80009bc:	f000 f920 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	220c      	movs	r2, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4807      	ldr	r0, [pc, #28]	@ (80009e4 <MX_TIM3_Init+0x128>)
 80009c8:	f003 fb6e 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80009d2:	f000 f915 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d6:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <MX_TIM3_Init+0x128>)
 80009d8:	f000 f9e2 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 80009dc:	bf00      	nop
 80009de:	3738      	adds	r7, #56	@ 0x38
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000144 	.word	0x20000144
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b092      	sub	sp, #72	@ 0x48
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]
 8000a02:	615a      	str	r2, [r3, #20]
 8000a04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	222c      	movs	r2, #44	@ 0x2c
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f005 f82d 	bl	8005a6c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000a12:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a14:	4a31      	ldr	r2, [pc, #196]	@ (8000adc <MX_TIM16_Init+0xf0>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64;
 8000a18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a1a:	2240      	movs	r2, #64	@ 0x40
 8000a1c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000a24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000a3e:	4826      	ldr	r0, [pc, #152]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a40:	f003 f8b2 	bl	8003ba8 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000a4a:	f000 f8d9 	bl	8000c00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000a4e:	4822      	ldr	r0, [pc, #136]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a50:	f003 f962 	bl	8003d18 <HAL_TIM_PWM_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000a5a:	f000 f8d1 	bl	8000c00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5e:	2360      	movs	r3, #96	@ 0x60
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4619      	mov	r1, r3
 8000a82:	4815      	ldr	r0, [pc, #84]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000a84:	f003 fb10 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000a8e:	f000 f8b7 	bl	8000c00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4807      	ldr	r0, [pc, #28]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000aba:	f004 f92b 	bl	8004d14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000ac4:	f000 f89c 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <MX_TIM16_Init+0xec>)
 8000aca:	f000 f969 	bl	8000da0 <HAL_TIM_MspPostInit>

}
 8000ace:	bf00      	nop
 8000ad0:	3748      	adds	r7, #72	@ 0x48
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000190 	.word	0x20000190
 8000adc:	40014400 	.word	0x40014400

08000ae0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000ae6:	4a15      	ldr	r2, [pc, #84]	@ (8000b3c <MX_USART2_UART_Init+0x5c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000aea:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000aec:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000af0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b09      	ldr	r3, [pc, #36]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_USART2_UART_Init+0x58>)
 8000b24:	f004 f96e 	bl	8004e04 <HAL_UART_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 f867 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200001dc 	.word	0x200001dc
 8000b3c:	40004400 	.word	0x40004400

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b56:	4b28      	ldr	r3, [pc, #160]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b5c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b78:	6153      	str	r3, [r2, #20]
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b90:	6153      	str	r3, [r2, #20]
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <MX_GPIO_Init+0xb8>)
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	21a8      	movs	r1, #168	@ 0xa8
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba6:	f001 fca3 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2122      	movs	r1, #34	@ 0x22
 8000bae:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <MX_GPIO_Init+0xbc>)
 8000bb0:	f001 fc9e 	bl	80024f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7;
 8000bb4:	23a8      	movs	r3, #168	@ 0xa8
 8000bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bce:	f001 fb1d 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000bd2:	2322      	movs	r3, #34	@ 0x22
 8000bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_GPIO_Init+0xbc>)
 8000bea:	f001 fb0f 	bl	800220c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bee:	bf00      	nop
 8000bf0:	3720      	adds	r7, #32
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	48000400 	.word	0x48000400

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a1c      	ldr	r2, [pc, #112]	@ (8000ce4 <HAL_CAN_MspInit+0x90>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d131      	bne.n	8000cda <HAL_CAN_MspInit+0x86>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c76:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce8 <HAL_CAN_MspInit+0x94>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce8 <HAL_CAN_MspInit+0x94>)
 8000c7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b19      	ldr	r3, [pc, #100]	@ (8000ce8 <HAL_CAN_MspInit+0x94>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <HAL_CAN_MspInit+0x94>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	4a15      	ldr	r2, [pc, #84]	@ (8000ce8 <HAL_CAN_MspInit+0x94>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c98:	6153      	str	r3, [r2, #20]
 8000c9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <HAL_CAN_MspInit+0x94>)
 8000c9c:	695b      	ldr	r3, [r3, #20]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ca6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000cb8:	2309      	movs	r3, #9
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc6:	f001 faa1 	bl	800220c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2014      	movs	r0, #20
 8000cd0:	f001 fa65 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000cd4:	2014      	movs	r0, #20
 8000cd6:	f001 fa7e 	bl	80021d6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	@ 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40006400 	.word	0x40006400
 8000ce8:	40021000 	.word	0x40021000

08000cec <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a25      	ldr	r2, [pc, #148]	@ (8000d90 <HAL_TIM_Base_MspInit+0xa4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10c      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfe:	4b25      	ldr	r3, [pc, #148]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	4a24      	ldr	r2, [pc, #144]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d08:	6193      	str	r3, [r2, #24]
 8000d0a:	4b22      	ldr	r3, [pc, #136]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d16:	e034      	b.n	8000d82 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM2)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d20:	d10c      	bne.n	8000d3c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d22:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	4a1b      	ldr	r2, [pc, #108]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	61d3      	str	r3, [r2, #28]
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
}
 8000d3a:	e022      	b.n	8000d82 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a15      	ldr	r2, [pc, #84]	@ (8000d98 <HAL_TIM_Base_MspInit+0xac>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10c      	bne.n	8000d60 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
}
 8000d5e:	e010      	b.n	8000d82 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_TIM_Base_MspInit+0xb0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10b      	bne.n	8000d82 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a09      	ldr	r2, [pc, #36]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <HAL_TIM_Base_MspInit+0xa8>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
}
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40012c00 	.word	0x40012c00
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40000400 	.word	0x40000400
 8000d9c:	40014400 	.word	0x40014400

08000da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	@ 0x30
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a5c      	ldr	r2, [pc, #368]	@ (8000f30 <HAL_TIM_MspPostInit+0x190>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d11e      	bne.n	8000e00 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b59      	ldr	r3, [pc, #356]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000dec:	2306      	movs	r3, #6
 8000dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfa:	f001 fa07 	bl	800220c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM16_MspPostInit 1 */

    /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8000dfe:	e092      	b.n	8000f26 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e08:	d11d      	bne.n	8000e46 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	4a49      	ldr	r2, [pc, #292]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	6153      	str	r3, [r2, #20]
 8000e16:	4b47      	ldr	r3, [pc, #284]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f001 f9e4 	bl	800220c <HAL_GPIO_Init>
}
 8000e44:	e06f      	b.n	8000f26 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a3b      	ldr	r2, [pc, #236]	@ (8000f38 <HAL_TIM_MspPostInit+0x198>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d149      	bne.n	8000ee4 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b38      	ldr	r3, [pc, #224]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e52:	695b      	ldr	r3, [r3, #20]
 8000e54:	4a37      	ldr	r2, [pc, #220]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e5a:	6153      	str	r3, [r2, #20]
 8000e5c:	4b35      	ldr	r3, [pc, #212]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b32      	ldr	r3, [pc, #200]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	4a31      	ldr	r2, [pc, #196]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e72:	6153      	str	r3, [r2, #20]
 8000e74:	4b2f      	ldr	r3, [pc, #188]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000e76:	695b      	ldr	r3, [r3, #20]
 8000e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e80:	2310      	movs	r3, #16
 8000e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e84:	2302      	movs	r3, #2
 8000e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e9e:	f001 f9b5 	bl	800220c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000ea2:	2311      	movs	r3, #17
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	481f      	ldr	r0, [pc, #124]	@ (8000f3c <HAL_TIM_MspPostInit+0x19c>)
 8000ebe:	f001 f9a5 	bl	800220c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ec2:	2380      	movs	r3, #128	@ 0x80
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4817      	ldr	r0, [pc, #92]	@ (8000f3c <HAL_TIM_MspPostInit+0x19c>)
 8000ede:	f001 f995 	bl	800220c <HAL_GPIO_Init>
}
 8000ee2:	e020      	b.n	8000f26 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM16)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a15      	ldr	r2, [pc, #84]	@ (8000f40 <HAL_TIM_MspPostInit+0x1a0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d11b      	bne.n	8000f26 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	4a10      	ldr	r2, [pc, #64]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ef8:	6153      	str	r3, [r2, #20]
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_TIM_MspPostInit+0x194>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f06:	2340      	movs	r3, #64	@ 0x40
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000f16:	2301      	movs	r3, #1
 8000f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4806      	ldr	r0, [pc, #24]	@ (8000f3c <HAL_TIM_MspPostInit+0x19c>)
 8000f22:	f001 f973 	bl	800220c <HAL_GPIO_Init>
}
 8000f26:	bf00      	nop
 8000f28:	3730      	adds	r7, #48	@ 0x30
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40000400 	.word	0x40000400
 8000f3c:	48000400 	.word	0x48000400
 8000f40:	40014400 	.word	0x40014400

08000f44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	@ 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <HAL_UART_MspInit+0x80>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d129      	bne.n	8000fba <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b12      	ldr	r3, [pc, #72]	@ (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	4a11      	ldr	r2, [pc, #68]	@ (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f88:	6153      	str	r3, [r2, #20]
 8000f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <HAL_UART_MspInit+0x84>)
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000f96:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f001 f929 	bl	800220c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fba:	bf00      	nop
 8000fbc:	3728      	adds	r7, #40	@ 0x28
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	40021000 	.word	0x40021000

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f917 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <CAN_RX0_IRQHandler+0x10>)
 8001032:	f000 fda9 	bl	8001b88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000084 	.word	0x20000084

08001040 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e00a      	b.n	8001068 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001052:	f3af 8000 	nop.w
 8001056:	4601      	mov	r1, r0
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	697a      	ldr	r2, [r7, #20]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	429a      	cmp	r2, r3
 800106e:	dbf0      	blt.n	8001052 <_read+0x12>
  }

  return len;
 8001070:	687b      	ldr	r3, [r7, #4]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_close>:
  }
  return len;
}

int _close(int file)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010a2:	605a      	str	r2, [r3, #4]
  return 0;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <_isatty>:

int _isatty(int file)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b083      	sub	sp, #12
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f004 fcf8 	bl	8005b08 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20003000 	.word	0x20003000
 8001144:	00000400 	.word	0x00000400
 8001148:	20000274 	.word	0x20000274
 800114c:	200003c8 	.word	0x200003c8

08001150 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <SystemInit+0x20>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115a:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <SystemInit+0x20>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001178:	f7ff ffea 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800117e:	490d      	ldr	r1, [pc, #52]	@ (80011b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001180:	4a0d      	ldr	r2, [pc, #52]	@ (80011b8 <LoopForever+0xe>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001194:	4c0a      	ldr	r4, [pc, #40]	@ (80011c0 <LoopForever+0x16>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011a2:	f004 fcb7 	bl	8005b14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a6:	f7ff f8f3 	bl	8000390 <main>

080011aa <LoopForever>:

LoopForever:
    b LoopForever
 80011aa:	e7fe      	b.n	80011aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011ac:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80011b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011b8:	08006618 	.word	0x08006618
  ldr r2, =_sbss
 80011bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011c0:	200003c8 	.word	0x200003c8

080011c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c4:	e7fe      	b.n	80011c4 <ADC1_2_IRQHandler>
	...

080011c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <HAL_Init+0x28>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a07      	ldr	r2, [pc, #28]	@ (80011f0 <HAL_Init+0x28>)
 80011d2:	f043 0310 	orr.w	r3, r3, #16
 80011d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d8:	2003      	movs	r0, #3
 80011da:	f000 ffd5 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 f808 	bl	80011f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fd12 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000

080011f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011fc:	4b12      	ldr	r3, [pc, #72]	@ (8001248 <HAL_InitTick+0x54>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_InitTick+0x58>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 ffed 	bl	80021f2 <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 ffb5 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	@ (8001250 <HAL_InitTick+0x5c>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000000 	.word	0x20000000
 800124c:	20000008 	.word	0x20000008
 8001250:	20000004 	.word	0x20000004

08001254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	@ (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008
 8001278:	20000278 	.word	0x20000278

0800127c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000278 	.word	0x20000278

08001294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff ffee 	bl	800127c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ac:	d005      	beq.n	80012ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ae:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_Delay+0x44>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4413      	add	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80012ba:	bf00      	nop
 80012bc:	f7ff ffde 	bl	800127c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d8f7      	bhi.n	80012bc <HAL_Delay+0x28>
  {
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000008 	.word	0x20000008

080012dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e0ed      	b.n	80014ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fcaa 	bl	8000c54 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001310:	f7ff ffb4 	bl	800127c <HAL_GetTick>
 8001314:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001316:	e012      	b.n	800133e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001318:	f7ff ffb0 	bl	800127c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b0a      	cmp	r3, #10
 8001324:	d90b      	bls.n	800133e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2205      	movs	r2, #5
 8001336:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0c5      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0e5      	beq.n	8001318 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0202 	bic.w	r2, r2, #2
 800135a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff ff8e 	bl	800127c <HAL_GetTick>
 8001360:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001362:	e012      	b.n	800138a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001364:	f7ff ff8a 	bl	800127c <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b0a      	cmp	r3, #10
 8001370:	d90b      	bls.n	800138a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2205      	movs	r2, #5
 8001382:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e09f      	b.n	80014ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e5      	bne.n	8001364 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7e1b      	ldrb	r3, [r3, #24]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d108      	bne.n	80013b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e007      	b.n	80013c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7e5b      	ldrb	r3, [r3, #25]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d108      	bne.n	80013dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80013ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e9b      	ldrb	r3, [r3, #26]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d108      	bne.n	8001406 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f042 0220 	orr.w	r2, r2, #32
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e007      	b.n	8001416 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0220 	bic.w	r2, r2, #32
 8001414:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7edb      	ldrb	r3, [r3, #27]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d108      	bne.n	8001430 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0210 	bic.w	r2, r2, #16
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e007      	b.n	8001440 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f042 0210 	orr.w	r2, r2, #16
 800143e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	7f1b      	ldrb	r3, [r3, #28]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d108      	bne.n	800145a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 0208 	orr.w	r2, r2, #8
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e007      	b.n	800146a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0208 	bic.w	r2, r2, #8
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7f5b      	ldrb	r3, [r3, #29]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d108      	bne.n	8001484 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f042 0204 	orr.w	r2, r2, #4
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e007      	b.n	8001494 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0204 	bic.w	r2, r2, #4
 8001492:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	ea42 0103 	orr.w	r1, r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	1e5a      	subs	r2, r3, #1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b087      	sub	sp, #28
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80014ea:	7cfb      	ldrb	r3, [r7, #19]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <HAL_CAN_ConfigFilter+0x26>
 80014f0:	7cfb      	ldrb	r3, [r7, #19]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	f040 80aa 	bne.w	800164c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	f003 031f 	and.w	r3, r3, #31
 8001510:	2201      	movs	r2, #1
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d123      	bne.n	800157a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	401a      	ands	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001554:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	3248      	adds	r2, #72	@ 0x48
 800155a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800156e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001570:	6979      	ldr	r1, [r7, #20]
 8001572:	3348      	adds	r3, #72	@ 0x48
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d122      	bne.n	80015c8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	431a      	orrs	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3248      	adds	r2, #72	@ 0x48
 80015a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015be:	6979      	ldr	r1, [r7, #20]
 80015c0:	3348      	adds	r3, #72	@ 0x48
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d109      	bne.n	80015e4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80015e2:	e007      	b.n	80015f4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800160e:	e007      	b.n	8001620 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	431a      	orrs	r2, r3
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d107      	bne.n	8001638 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	431a      	orrs	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800163e:	f023 0201 	bic.w	r2, r3, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	e006      	b.n	800165a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
  }
}
 800165a:	4618      	mov	r0, r3
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b01      	cmp	r3, #1
 8001678:	d12e      	bne.n	80016d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2202      	movs	r2, #2
 800167e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 0201 	bic.w	r2, r2, #1
 8001690:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001692:	f7ff fdf3 	bl	800127c <HAL_GetTick>
 8001696:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001698:	e012      	b.n	80016c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800169a:	f7ff fdef 	bl	800127c <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b0a      	cmp	r3, #10
 80016a6:	d90b      	bls.n	80016c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2205      	movs	r2, #5
 80016b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1e5      	bne.n	800169a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	e006      	b.n	80016e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
  }
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b089      	sub	sp, #36	@ 0x24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001702:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d003      	beq.n	800171a <HAL_CAN_AddTxMessage+0x2c>
 8001712:	7ffb      	ldrb	r3, [r7, #31]
 8001714:	2b02      	cmp	r3, #2
 8001716:	f040 80ad 	bne.w	8001874 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10a      	bne.n	800173a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800172a:	2b00      	cmp	r3, #0
 800172c:	d105      	bne.n	800173a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8095 	beq.w	8001864 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	0e1b      	lsrs	r3, r3, #24
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001744:	2201      	movs	r2, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	409a      	lsls	r2, r3
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10d      	bne.n	8001772 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	6809      	ldr	r1, [r1, #0]
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	3318      	adds	r3, #24
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	e00f      	b.n	8001792 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800177c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001786:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3318      	adds	r3, #24
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	440b      	add	r3, r1
 8001790:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3318      	adds	r3, #24
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	440b      	add	r3, r1
 80017a2:	3304      	adds	r3, #4
 80017a4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	7d1b      	ldrb	r3, [r3, #20]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d111      	bne.n	80017d2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3318      	adds	r3, #24
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	3304      	adds	r3, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	6811      	ldr	r1, [r2, #0]
 80017c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3318      	adds	r3, #24
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3307      	adds	r3, #7
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	061a      	lsls	r2, r3, #24
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3306      	adds	r3, #6
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	041b      	lsls	r3, r3, #16
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3305      	adds	r3, #5
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	4313      	orrs	r3, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	3204      	adds	r2, #4
 80017f2:	7812      	ldrb	r2, [r2, #0]
 80017f4:	4610      	mov	r0, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	6811      	ldr	r1, [r2, #0]
 80017fa:	ea43 0200 	orr.w	r2, r3, r0
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	440b      	add	r3, r1
 8001804:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001808:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3303      	adds	r3, #3
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	061a      	lsls	r2, r3, #24
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3302      	adds	r3, #2
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	041b      	lsls	r3, r3, #16
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3301      	adds	r3, #1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	4313      	orrs	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	7812      	ldrb	r2, [r2, #0]
 800182a:	4610      	mov	r0, r2
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6811      	ldr	r1, [r2, #0]
 8001830:	ea43 0200 	orr.w	r2, r3, r0
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	440b      	add	r3, r1
 800183a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800183e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3318      	adds	r3, #24
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	4413      	add	r3, r2
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	6811      	ldr	r1, [r2, #0]
 8001852:	f043 0201 	orr.w	r2, r3, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3318      	adds	r3, #24
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	440b      	add	r3, r1
 800185e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e00e      	b.n	8001882 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001868:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e006      	b.n	8001882 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
  }
}
 8001882:	4618      	mov	r0, r3
 8001884:	3724      	adds	r7, #36	@ 0x24
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800188e:	b480      	push	{r7}
 8001890:	b085      	sub	sp, #20
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80018a2:	7afb      	ldrb	r3, [r7, #11]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d002      	beq.n	80018ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d11d      	bne.n	80018ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3301      	adds	r3, #1
 80018d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3301      	adds	r3, #1
 80018e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018f8:	b480      	push	{r7}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
 8001904:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800190e:	7dfb      	ldrb	r3, [r7, #23]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d003      	beq.n	800191c <HAL_CAN_GetRxMessage+0x24>
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	2b02      	cmp	r3, #2
 8001918:	f040 8103 	bne.w	8001b22 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10e      	bne.n	8001940 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d116      	bne.n	800195e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001934:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0f7      	b.n	8001b30 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d107      	bne.n	800195e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001952:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0e8      	b.n	8001b30 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	331b      	adds	r3, #27
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0204 	and.w	r2, r3, #4
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10c      	bne.n	8001996 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	331b      	adds	r3, #27
 8001984:	011b      	lsls	r3, r3, #4
 8001986:	4413      	add	r3, r2
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0d5b      	lsrs	r3, r3, #21
 800198c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	e00b      	b.n	80019ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	331b      	adds	r3, #27
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4413      	add	r3, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	08db      	lsrs	r3, r3, #3
 80019a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	331b      	adds	r3, #27
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0202 	and.w	r2, r3, #2
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	331b      	adds	r3, #27
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	3304      	adds	r3, #4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0308 	and.w	r3, r3, #8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2208      	movs	r2, #8
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	e00b      	b.n	80019fc <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	331b      	adds	r3, #27
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	3304      	adds	r3, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 020f 	and.w	r2, r3, #15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	331b      	adds	r3, #27
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	3304      	adds	r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	331b      	adds	r3, #27
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	4413      	add	r3, r2
 8001a20:	3304      	adds	r3, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	011b      	lsls	r3, r3, #4
 8001a34:	4413      	add	r3, r2
 8001a36:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4413      	add	r3, r2
 8001a4c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0a1a      	lsrs	r2, r3, #8
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	0c1a      	lsrs	r2, r3, #16
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	3302      	adds	r3, #2
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0e1a      	lsrs	r2, r3, #24
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	3303      	adds	r3, #3
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	4413      	add	r3, r2
 8001ab2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0a1a      	lsrs	r2, r3, #8
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	3305      	adds	r3, #5
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	4413      	add	r3, r2
 8001acc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	0c1a      	lsrs	r2, r3, #16
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3306      	adds	r3, #6
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	0e1a      	lsrs	r2, r3, #24
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	3307      	adds	r3, #7
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d108      	bne.n	8001b0e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 0220 	orr.w	r2, r2, #32
 8001b0a:	60da      	str	r2, [r3, #12]
 8001b0c:	e007      	b.n	8001b1e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0220 	orr.w	r2, r2, #32
 8001b1c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	e006      	b.n	8001b30 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
  }
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d002      	beq.n	8001b5a <HAL_CAN_ActivateNotification+0x1e>
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d109      	bne.n	8001b6e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6959      	ldr	r1, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e006      	b.n	8001b7c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
  }
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	@ 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d07c      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d023      	beq.n	8001c20 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f983 	bl	8001ef6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001bf0:	e016      	b.n	8001c20 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c04:	e00c      	b.n	8001c20 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d004      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	e002      	b.n	8001c20 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f989 	bl	8001f32 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d024      	beq.n	8001c74 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f963 	bl	8001f0a <HAL_CAN_TxMailbox1CompleteCallback>
 8001c44:	e016      	b.n	8001c74 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d004      	beq.n	8001c5a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c58:	e00c      	b.n	8001c74 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c6c:	e002      	b.n	8001c74 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f969 	bl	8001f46 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d024      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f000 f943 	bl	8001f1e <HAL_CAN_TxMailbox2CompleteCallback>
 8001c98:	e016      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cac:	e00c      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cc0:	e002      	b.n	8001cc8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f949 	bl	8001f5a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f003 0310 	and.w	r3, r3, #16
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ce2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cec:	6a3b      	ldr	r3, [r7, #32]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00b      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2208      	movs	r2, #8
 8001d06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f930 	bl	8001f6e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d009      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7fe faec 	bl	8000304 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00c      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f912 	bl	8001f96 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d009      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8f9 	bl	8001f82 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8fc 	bl	8001faa <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001db2:	6a3b      	ldr	r3, [r7, #32]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2208      	movs	r2, #8
 8001dcc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8f5 	bl	8001fbe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d07b      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d072      	beq.n	8001ece <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d008      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	f043 0302 	orr.w	r3, r3, #2
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d008      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d043      	beq.n	8001ece <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d03e      	beq.n	8001ece <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e56:	2b60      	cmp	r3, #96	@ 0x60
 8001e58:	d02b      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x32a>
 8001e5a:	2b60      	cmp	r3, #96	@ 0x60
 8001e5c:	d82e      	bhi.n	8001ebc <HAL_CAN_IRQHandler+0x334>
 8001e5e:	2b50      	cmp	r3, #80	@ 0x50
 8001e60:	d022      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x320>
 8001e62:	2b50      	cmp	r3, #80	@ 0x50
 8001e64:	d82a      	bhi.n	8001ebc <HAL_CAN_IRQHandler+0x334>
 8001e66:	2b40      	cmp	r3, #64	@ 0x40
 8001e68:	d019      	beq.n	8001e9e <HAL_CAN_IRQHandler+0x316>
 8001e6a:	2b40      	cmp	r3, #64	@ 0x40
 8001e6c:	d826      	bhi.n	8001ebc <HAL_CAN_IRQHandler+0x334>
 8001e6e:	2b30      	cmp	r3, #48	@ 0x30
 8001e70:	d010      	beq.n	8001e94 <HAL_CAN_IRQHandler+0x30c>
 8001e72:	2b30      	cmp	r3, #48	@ 0x30
 8001e74:	d822      	bhi.n	8001ebc <HAL_CAN_IRQHandler+0x334>
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d002      	beq.n	8001e80 <HAL_CAN_IRQHandler+0x2f8>
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d005      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e7e:	e01d      	b.n	8001ebc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	f043 0308 	orr.w	r3, r3, #8
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e88:	e019      	b.n	8001ebe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	f043 0310 	orr.w	r3, r3, #16
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e92:	e014      	b.n	8001ebe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	f043 0320 	orr.w	r3, r3, #32
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e9c:	e00f      	b.n	8001ebe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ea6:	e00a      	b.n	8001ebe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eb0:	e005      	b.n	8001ebe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eba:	e000      	b.n	8001ebe <HAL_CAN_IRQHandler+0x336>
            break;
 8001ebc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001ecc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f872 	bl	8001fd2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	@ 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	@ (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	e14e      	b.n	80024ba <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	4013      	ands	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8140 	beq.w	80024b4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d005      	beq.n	800224c <HAL_GPIO_Init+0x40>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d130      	bne.n	80022ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002282:	2201      	movs	r2, #1
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 0201 	and.w	r2, r3, #1
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b03      	cmp	r3, #3
 80022b8:	d017      	beq.n	80022ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d123      	bne.n	800233e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	08da      	lsrs	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3208      	adds	r2, #8
 80022fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002302:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	220f      	movs	r2, #15
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	4013      	ands	r3, r2
 8002318:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691a      	ldr	r2, [r3, #16]
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	08da      	lsrs	r2, r3, #3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3208      	adds	r2, #8
 8002338:	6939      	ldr	r1, [r7, #16]
 800233a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0203 	and.w	r2, r3, #3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 809a 	beq.w	80024b4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002380:	4b55      	ldr	r3, [pc, #340]	@ (80024d8 <HAL_GPIO_Init+0x2cc>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a54      	ldr	r2, [pc, #336]	@ (80024d8 <HAL_GPIO_Init+0x2cc>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b52      	ldr	r3, [pc, #328]	@ (80024d8 <HAL_GPIO_Init+0x2cc>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002398:	4a50      	ldr	r2, [pc, #320]	@ (80024dc <HAL_GPIO_Init+0x2d0>)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c2:	d013      	beq.n	80023ec <HAL_GPIO_Init+0x1e0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a46      	ldr	r2, [pc, #280]	@ (80024e0 <HAL_GPIO_Init+0x2d4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00d      	beq.n	80023e8 <HAL_GPIO_Init+0x1dc>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a45      	ldr	r2, [pc, #276]	@ (80024e4 <HAL_GPIO_Init+0x2d8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <HAL_GPIO_Init+0x1d8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a44      	ldr	r2, [pc, #272]	@ (80024e8 <HAL_GPIO_Init+0x2dc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_GPIO_Init+0x1d4>
 80023dc:	2303      	movs	r3, #3
 80023de:	e006      	b.n	80023ee <HAL_GPIO_Init+0x1e2>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e004      	b.n	80023ee <HAL_GPIO_Init+0x1e2>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e002      	b.n	80023ee <HAL_GPIO_Init+0x1e2>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_GPIO_Init+0x1e2>
 80023ec:	2300      	movs	r3, #0
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	f002 0203 	and.w	r2, r2, #3
 80023f4:	0092      	lsls	r2, r2, #2
 80023f6:	4093      	lsls	r3, r2
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023fe:	4937      	ldr	r1, [pc, #220]	@ (80024dc <HAL_GPIO_Init+0x2d0>)
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3302      	adds	r3, #2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800240c:	4b37      	ldr	r3, [pc, #220]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002430:	4a2e      	ldr	r2, [pc, #184]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002436:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800245a:	4a24      	ldr	r2, [pc, #144]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002460:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	43db      	mvns	r3, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024ae:	4a0f      	ldr	r2, [pc, #60]	@ (80024ec <HAL_GPIO_Init+0x2e0>)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f47f aea9 	bne.w	800221c <HAL_GPIO_Init+0x10>
  }
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40010000 	.word	0x40010000
 80024e0:	48000400 	.word	0x48000400
 80024e4:	48000800 	.word	0x48000800
 80024e8:	48000c00 	.word	0x48000c00
 80024ec:	40010400 	.word	0x40010400

080024f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	460b      	mov	r3, r1
 80024fa:	807b      	strh	r3, [r7, #2]
 80024fc:	4613      	mov	r3, r2
 80024fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002500:	787b      	ldrb	r3, [r7, #1]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800250c:	e002      	b.n	8002514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002526:	af00      	add	r7, sp, #0
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002530:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d102      	bne.n	8002546 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	f000 bff4 	b.w	800352e <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002546:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 816d 	beq.w	8002836 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800255c:	4bb4      	ldr	r3, [pc, #720]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 030c 	and.w	r3, r3, #12
 8002564:	2b04      	cmp	r3, #4
 8002566:	d00c      	beq.n	8002582 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002568:	4bb1      	ldr	r3, [pc, #708]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d157      	bne.n	8002624 <HAL_RCC_OscConfig+0x104>
 8002574:	4bae      	ldr	r3, [pc, #696]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002580:	d150      	bne.n	8002624 <HAL_RCC_OscConfig+0x104>
 8002582:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002586:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800258e:	fa93 f3a3 	rbit	r3, r3
 8002592:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002596:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259a:	fab3 f383 	clz	r3, r3
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a2:	d802      	bhi.n	80025aa <HAL_RCC_OscConfig+0x8a>
 80025a4:	4ba2      	ldr	r3, [pc, #648]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0xb6>
 80025aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025ae:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80025be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025c2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80025c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80025d2:	4b97      	ldr	r3, [pc, #604]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025da:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80025de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80025e2:	fa92 f2a2 	rbit	r2, r2
 80025e6:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80025ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80025ee:	fab2 f282 	clz	r2, r2
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	f042 0220 	orr.w	r2, r2, #32
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f002 021f 	and.w	r2, r2, #31
 80025fe:	2101      	movs	r1, #1
 8002600:	fa01 f202 	lsl.w	r2, r1, r2
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8114 	beq.w	8002834 <HAL_RCC_OscConfig+0x314>
 800260c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002610:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	f040 810b 	bne.w	8002834 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f000 bf85 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002628:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002634:	d106      	bne.n	8002644 <HAL_RCC_OscConfig+0x124>
 8002636:	4b7e      	ldr	r3, [pc, #504]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7d      	ldr	r2, [pc, #500]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e036      	b.n	80026b2 <HAL_RCC_OscConfig+0x192>
 8002644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002648:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x14e>
 8002654:	4b76      	ldr	r3, [pc, #472]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a75      	ldr	r2, [pc, #468]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 800265a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b73      	ldr	r3, [pc, #460]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a72      	ldr	r2, [pc, #456]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	e021      	b.n	80026b2 <HAL_RCC_OscConfig+0x192>
 800266e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002672:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800267e:	d10c      	bne.n	800269a <HAL_RCC_OscConfig+0x17a>
 8002680:	4b6b      	ldr	r3, [pc, #428]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6a      	ldr	r2, [pc, #424]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002686:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b68      	ldr	r3, [pc, #416]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a67      	ldr	r2, [pc, #412]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e00b      	b.n	80026b2 <HAL_RCC_OscConfig+0x192>
 800269a:	4b65      	ldr	r3, [pc, #404]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a64      	ldr	r2, [pc, #400]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80026a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b62      	ldr	r3, [pc, #392]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a61      	ldr	r2, [pc, #388]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	f023 020f 	bic.w	r2, r3, #15
 80026ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	495a      	ldr	r1, [pc, #360]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d054      	beq.n	8002786 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fdce 	bl	800127c <HAL_GetTick>
 80026e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e6:	f7fe fdc9 	bl	800127c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d902      	bls.n	80026fc <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	f000 bf19 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
 80026fc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002700:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002704:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002708:	fa93 f3a3 	rbit	r3, r3
 800270c:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002710:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b3f      	cmp	r3, #63	@ 0x3f
 800271c:	d802      	bhi.n	8002724 <HAL_RCC_OscConfig+0x204>
 800271e:	4b44      	ldr	r3, [pc, #272]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	e015      	b.n	8002750 <HAL_RCC_OscConfig+0x230>
 8002724:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002728:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800273c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002740:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800274c:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002754:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002758:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800275c:	fa92 f2a2 	rbit	r2, r2
 8002760:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002764:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002768:	fab2 f282 	clz	r2, r2
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	f042 0220 	orr.w	r2, r2, #32
 8002772:	b2d2      	uxtb	r2, r2
 8002774:	f002 021f 	and.w	r2, r2, #31
 8002778:	2101      	movs	r1, #1
 800277a:	fa01 f202 	lsl.w	r2, r1, r2
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0b0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1c6>
 8002784:	e057      	b.n	8002836 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fd79 	bl	800127c <HAL_GetTick>
 800278a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002790:	f7fe fd74 	bl	800127c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b64      	cmp	r3, #100	@ 0x64
 800279e:	d902      	bls.n	80027a6 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	f000 bec4 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
 80027a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027aa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80027ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	fab3 f383 	clz	r3, r3
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80027c6:	d802      	bhi.n	80027ce <HAL_RCC_OscConfig+0x2ae>
 80027c8:	4b19      	ldr	r3, [pc, #100]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	e015      	b.n	80027fa <HAL_RCC_OscConfig+0x2da>
 80027ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027d2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80027e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80027e6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027ea:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80027f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_RCC_OscConfig+0x310>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027fe:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002802:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002806:	fa92 f2a2 	rbit	r2, r2
 800280a:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800280e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002812:	fab2 f282 	clz	r2, r2
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	f042 0220 	orr.w	r2, r2, #32
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	f002 021f 	and.w	r2, r2, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f202 	lsl.w	r2, r1, r2
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1b0      	bne.n	8002790 <HAL_RCC_OscConfig+0x270>
 800282e:	e002      	b.n	8002836 <HAL_RCC_OscConfig+0x316>
 8002830:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 816c 	beq.w	8002b24 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800284c:	4bcc      	ldr	r3, [pc, #816]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002858:	4bc9      	ldr	r3, [pc, #804]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d16d      	bne.n	8002940 <HAL_RCC_OscConfig+0x420>
 8002864:	4bc6      	ldr	r3, [pc, #792]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d167      	bne.n	8002940 <HAL_RCC_OscConfig+0x420>
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002882:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b3f      	cmp	r3, #63	@ 0x3f
 800288e:	d802      	bhi.n	8002896 <HAL_RCC_OscConfig+0x376>
 8002890:	4bbb      	ldr	r3, [pc, #748]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	e013      	b.n	80028be <HAL_RCC_OscConfig+0x39e>
 8002896:	2302      	movs	r3, #2
 8002898:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80028a0:	fa93 f3a3 	rbit	r3, r3
 80028a4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028a8:	2302      	movs	r3, #2
 80028aa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80028ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80028ba:	4bb1      	ldr	r3, [pc, #708]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	2202      	movs	r2, #2
 80028c0:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80028c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80028d0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80028d4:	fab2 f282 	clz	r2, r2
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	f042 0220 	orr.w	r2, r2, #32
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	f002 021f 	and.w	r2, r2, #31
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCC_OscConfig+0x3e6>
 80028f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d002      	beq.n	8002906 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f000 be14 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002906:	4b9e      	ldr	r3, [pc, #632]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	21f8      	movs	r1, #248	@ 0xf8
 800291c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002924:	fa91 f1a1 	rbit	r1, r1
 8002928:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800292c:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002930:	fab1 f181 	clz	r1, r1
 8002934:	b2c9      	uxtb	r1, r1
 8002936:	408b      	lsls	r3, r1
 8002938:	4991      	ldr	r1, [pc, #580]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	e0f1      	b.n	8002b24 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002944:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 8083 	beq.w	8002a58 <HAL_RCC_OscConfig+0x538>
 8002952:	2301      	movs	r3, #1
 8002954:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002964:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002972:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	461a      	mov	r2, r3
 800297a:	2301      	movs	r3, #1
 800297c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fe fc7d 	bl	800127c <HAL_GetTick>
 8002982:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002986:	e00a      	b.n	800299e <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002988:	f7fe fc78 	bl	800127c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d902      	bls.n	800299e <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	f000 bdc8 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
 800299e:	2302      	movs	r3, #2
 80029a0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80029b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80029bc:	d802      	bhi.n	80029c4 <HAL_RCC_OscConfig+0x4a4>
 80029be:	4b70      	ldr	r3, [pc, #448]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	e013      	b.n	80029ec <HAL_RCC_OscConfig+0x4cc>
 80029c4:	2302      	movs	r3, #2
 80029c6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80029ce:	fa93 f3a3 	rbit	r3, r3
 80029d2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80029d6:	2302      	movs	r3, #2
 80029d8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80029dc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80029e8:	4b65      	ldr	r3, [pc, #404]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ec:	2202      	movs	r2, #2
 80029ee:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80029f2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80029f6:	fa92 f2a2 	rbit	r2, r2
 80029fa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80029fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002a02:	fab2 f282 	clz	r2, r2
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	f002 021f 	and.w	r2, r2, #31
 8002a12:	2101      	movs	r1, #1
 8002a14:	fa01 f202 	lsl.w	r2, r1, r2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0b4      	beq.n	8002988 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b58      	ldr	r3, [pc, #352]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	21f8      	movs	r1, #248	@ 0xf8
 8002a34:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002a3c:	fa91 f1a1 	rbit	r1, r1
 8002a40:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002a44:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002a48:	fab1 f181 	clz	r1, r1
 8002a4c:	b2c9      	uxtb	r1, r1
 8002a4e:	408b      	lsls	r3, r1
 8002a50:	494b      	ldr	r1, [pc, #300]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]
 8002a56:	e065      	b.n	8002b24 <HAL_RCC_OscConfig+0x604>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a78:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a84:	f7fe fbfa 	bl	800127c <HAL_GetTick>
 8002a88:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8e:	f7fe fbf5 	bl	800127c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d902      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	f000 bd45 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aaa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002aae:	fa93 f3a3 	rbit	r3, r3
 8002ab2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ac2:	d802      	bhi.n	8002aca <HAL_RCC_OscConfig+0x5aa>
 8002ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	e013      	b.n	8002af2 <HAL_RCC_OscConfig+0x5d2>
 8002aca:	2302      	movs	r3, #2
 8002acc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002adc:	2302      	movs	r3, #2
 8002ade:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ae2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ae6:	fa93 f3a3 	rbit	r3, r3
 8002aea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aee:	4b24      	ldr	r3, [pc, #144]	@ (8002b80 <HAL_RCC_OscConfig+0x660>)
 8002af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af2:	2202      	movs	r2, #2
 8002af4:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002af8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002afc:	fa92 f2a2 	rbit	r2, r2
 8002b00:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002b04:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b08:	fab2 f282 	clz	r2, r2
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	f042 0220 	orr.w	r2, r2, #32
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	f002 021f 	and.w	r2, r2, #31
 8002b18:	2101      	movs	r1, #1
 8002b1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1b4      	bne.n	8002a8e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b28:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8115 	beq.w	8002d64 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07e      	beq.n	8002c48 <HAL_RCC_OscConfig+0x728>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b54:	fa93 f3a3 	rbit	r3, r3
 8002b58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_RCC_OscConfig+0x664>)
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2301      	movs	r3, #1
 8002b72:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7fe fb82 	bl	800127c <HAL_GetTick>
 8002b78:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7c:	e00f      	b.n	8002b9e <HAL_RCC_OscConfig+0x67e>
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b88:	f7fe fb78 	bl	800127c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d902      	bls.n	8002b9e <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	f000 bcc8 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bc0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002bdc:	2202      	movs	r2, #2
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bf2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002bf6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf8:	4bb0      	ldr	r3, [pc, #704]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002bfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c00:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c04:	2102      	movs	r1, #2
 8002c06:	6019      	str	r1, [r3, #0]
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	fa93 f1a3 	rbit	r1, r3
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c1e:	6019      	str	r1, [r3, #0]
  return result;
 8002c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0a0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x668>
 8002c46:	e08d      	b.n	8002d64 <HAL_RCC_OscConfig+0x844>
 8002c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c58:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	fa93 f2a3 	rbit	r2, r3
 8002c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c66:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c6a:	601a      	str	r2, [r3, #0]
  return result;
 8002c6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c70:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002c74:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b90      	ldr	r3, [pc, #576]	@ (8002ec0 <HAL_RCC_OscConfig+0x9a0>)
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	461a      	mov	r2, r3
 8002c86:	2300      	movs	r3, #0
 8002c88:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8a:	f7fe faf7 	bl	800127c <HAL_GetTick>
 8002c8e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c94:	f7fe faf2 	bl	800127c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d902      	bls.n	8002caa <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f000 bc42 	b.w	800352e <HAL_RCC_OscConfig+0x100e>
 8002caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cae:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	fa93 f2a3 	rbit	r2, r3
 8002cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cc8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cd2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cde:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002d14:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d16:	4b69      	ldr	r3, [pc, #420]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002d18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d22:	2102      	movs	r1, #2
 8002d24:	6019      	str	r1, [r3, #0]
 8002d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	fa93 f1a3 	rbit	r1, r3
 8002d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d3c:	6019      	str	r1, [r3, #0]
  return result;
 8002d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d42:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fab3 f383 	clz	r3, r3
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2101      	movs	r1, #1
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	4013      	ands	r3, r2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d197      	bne.n	8002c94 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d68:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 819e 	beq.w	80030b6 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d80:	4b4e      	ldr	r3, [pc, #312]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d116      	bne.n	8002dba <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	4a4a      	ldr	r2, [pc, #296]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d96:	61d3      	str	r3, [r2, #28]
 8002d98:	4b48      	ldr	r3, [pc, #288]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da4:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dae:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002db2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002db4:	2301      	movs	r3, #1
 8002db6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dba:	4b42      	ldr	r3, [pc, #264]	@ (8002ec4 <HAL_RCC_OscConfig+0x9a4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d11a      	bne.n	8002dfc <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec4 <HAL_RCC_OscConfig+0x9a4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a3e      	ldr	r2, [pc, #248]	@ (8002ec4 <HAL_RCC_OscConfig+0x9a4>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dd2:	f7fe fa53 	bl	800127c <HAL_GetTick>
 8002dd6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	e009      	b.n	8002df0 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ddc:	f7fe fa4e 	bl	800127c <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b64      	cmp	r3, #100	@ 0x64
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e39e      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df0:	4b34      	ldr	r3, [pc, #208]	@ (8002ec4 <HAL_RCC_OscConfig+0x9a4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e00:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x8fa>
 8002e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a2a      	ldr	r2, [pc, #168]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	e035      	b.n	8002e86 <HAL_RCC_OscConfig+0x966>
 8002e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x924>
 8002e2a:	4b24      	ldr	r3, [pc, #144]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a23      	ldr	r2, [pc, #140]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6213      	str	r3, [r2, #32]
 8002e36:	4b21      	ldr	r3, [pc, #132]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4a20      	ldr	r2, [pc, #128]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	6213      	str	r3, [r2, #32]
 8002e42:	e020      	b.n	8002e86 <HAL_RCC_OscConfig+0x966>
 8002e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	d10c      	bne.n	8002e6e <HAL_RCC_OscConfig+0x94e>
 8002e54:	4b19      	ldr	r3, [pc, #100]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	4a18      	ldr	r2, [pc, #96]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e5a:	f043 0304 	orr.w	r3, r3, #4
 8002e5e:	6213      	str	r3, [r2, #32]
 8002e60:	4b16      	ldr	r3, [pc, #88]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4a15      	ldr	r2, [pc, #84]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e00b      	b.n	8002e86 <HAL_RCC_OscConfig+0x966>
 8002e6e:	4b13      	ldr	r3, [pc, #76]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4a12      	ldr	r2, [pc, #72]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e74:	f023 0301 	bic.w	r3, r3, #1
 8002e78:	6213      	str	r3, [r2, #32]
 8002e7a:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8002ebc <HAL_RCC_OscConfig+0x99c>)
 8002e80:	f023 0304 	bic.w	r3, r3, #4
 8002e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7fe f9f0 	bl	800127c <HAL_GetTick>
 8002e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea0:	e012      	b.n	8002ec8 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea2:	f7fe f9eb 	bl	800127c <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d908      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e339      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
 8002eba:	bf00      	nop
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	10908120 	.word	0x10908120
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ecc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ed8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ef0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f0e:	601a      	str	r2, [r3, #0]
  return result;
 8002f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f14:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002f18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_RCC_OscConfig+0xa10>
 8002f2a:	4b98      	ldr	r3, [pc, #608]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	e013      	b.n	8002f58 <HAL_RCC_OscConfig+0xa38>
 8002f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f38:	2202      	movs	r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	fa93 f2a3 	rbit	r2, r3
 8002f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f4e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	4b8d      	ldr	r3, [pc, #564]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f5c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f60:	2102      	movs	r1, #2
 8002f62:	6011      	str	r1, [r2, #0]
 8002f64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f68:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	fa92 f1a2 	rbit	r1, r2
 8002f72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f76:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f7a:	6011      	str	r1, [r2, #0]
  return result;
 8002f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002f80:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f002 021f 	and.w	r2, r2, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f43f af7f 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x982>
 8002fa4:	e07d      	b.n	80030a2 <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa6:	f7fe f969 	bl	800127c <HAL_GetTick>
 8002faa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fb0:	f7fe f964 	bl	800127c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e2b2      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
 8002fc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fcc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	fa93 f2a3 	rbit	r2, r3
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff0:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	fa93 f2a3 	rbit	r2, r3
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800300e:	601a      	str	r2, [r3, #0]
  return result;
 8003010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003014:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003018:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0xb10>
 800302a:	4b58      	ldr	r3, [pc, #352]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	e013      	b.n	8003058 <HAL_RCC_OscConfig+0xb38>
 8003030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003034:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003038:	2202      	movs	r2, #2
 800303a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003040:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	4b4d      	ldr	r3, [pc, #308]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800305c:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003060:	2102      	movs	r1, #2
 8003062:	6011      	str	r1, [r2, #0]
 8003064:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003068:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	fa92 f1a2 	rbit	r1, r2
 8003072:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003076:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800307a:	6011      	str	r1, [r2, #0]
  return result;
 800307c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003080:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	fab2 f282 	clz	r2, r2
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	f002 021f 	and.w	r2, r2, #31
 8003096:	2101      	movs	r1, #1
 8003098:	fa01 f202 	lsl.w	r2, r1, r2
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d186      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030a2:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d105      	bne.n	80030b6 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030aa:	4b38      	ldr	r3, [pc, #224]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	4a37      	ldr	r2, [pc, #220]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 80030b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 8232 	beq.w	800352c <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030c8:	4b30      	ldr	r3, [pc, #192]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	f000 8201 	beq.w	80034d8 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	f040 8157 	bne.w	8003396 <HAL_RCC_OscConfig+0xe76>
 80030e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	fa93 f2a3 	rbit	r2, r3
 8003104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003108:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800310c:	601a      	str	r2, [r3, #0]
  return result;
 800310e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003112:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003116:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	fab3 f383 	clz	r3, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003122:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	461a      	mov	r2, r3
 800312a:	2300      	movs	r3, #0
 800312c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312e:	f7fe f8a5 	bl	800127c <HAL_GetTick>
 8003132:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	e009      	b.n	800314c <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe f8a0 	bl	800127c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e1f0      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003154:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800315e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	fa93 f2a3 	rbit	r2, r3
 8003168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003170:	601a      	str	r2, [r3, #0]
  return result;
 8003172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003176:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800317a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b3f      	cmp	r3, #63	@ 0x3f
 8003184:	d804      	bhi.n	8003190 <HAL_RCC_OscConfig+0xc70>
 8003186:	4b01      	ldr	r3, [pc, #4]	@ (800318c <HAL_RCC_OscConfig+0xc6c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	e029      	b.n	80031e0 <HAL_RCC_OscConfig+0xcc0>
 800318c:	40021000 	.word	0x40021000
 8003190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003194:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003198:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800319c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031a2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	fa93 f2a3 	rbit	r2, r3
 80031ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031b0:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031ba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	fa93 f2a3 	rbit	r2, r3
 80031d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031d6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	4bc3      	ldr	r3, [pc, #780]	@ (80034ec <HAL_RCC_OscConfig+0xfcc>)
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031e4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80031ec:	6011      	str	r1, [r2, #0]
 80031ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80031f2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fa92 f1a2 	rbit	r1, r2
 80031fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003200:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003204:	6011      	str	r1, [r2, #0]
  return result;
 8003206:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800320a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	fab2 f282 	clz	r2, r2
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	f042 0220 	orr.w	r2, r2, #32
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f002 021f 	and.w	r2, r2, #31
 8003220:	2101      	movs	r1, #1
 8003222:	fa01 f202 	lsl.w	r2, r1, r2
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d185      	bne.n	8003138 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800322c:	4baf      	ldr	r3, [pc, #700]	@ (80034ec <HAL_RCC_OscConfig+0xfcc>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003240:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003244:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	430b      	orrs	r3, r1
 800324e:	49a7      	ldr	r1, [pc, #668]	@ (80034ec <HAL_RCC_OscConfig+0xfcc>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003258:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800325c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003266:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	fa93 f2a3 	rbit	r2, r3
 8003270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003274:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003278:	601a      	str	r2, [r3, #0]
  return result;
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003282:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	fab3 f383 	clz	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800328e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	461a      	mov	r2, r3
 8003296:	2301      	movs	r3, #1
 8003298:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329a:	f7fd ffef 	bl	800127c <HAL_GetTick>
 800329e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032a2:	e009      	b.n	80032b8 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fd ffea 	bl	800127c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e13a      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
 80032b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032bc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80032c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032ca:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	fa93 f2a3 	rbit	r2, r3
 80032d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032d8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032dc:	601a      	str	r2, [r3, #0]
  return result;
 80032de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80032e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b3f      	cmp	r3, #63	@ 0x3f
 80032f0:	d802      	bhi.n	80032f8 <HAL_RCC_OscConfig+0xdd8>
 80032f2:	4b7e      	ldr	r3, [pc, #504]	@ (80034ec <HAL_RCC_OscConfig+0xfcc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	e027      	b.n	8003348 <HAL_RCC_OscConfig+0xe28>
 80032f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003300:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	fa93 f2a3 	rbit	r2, r3
 8003314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003318:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003322:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003326:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003330:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	fa93 f2a3 	rbit	r2, r3
 800333a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800333e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	4b69      	ldr	r3, [pc, #420]	@ (80034ec <HAL_RCC_OscConfig+0xfcc>)
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800334c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003350:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003354:	6011      	str	r1, [r2, #0]
 8003356:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800335a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	fa92 f1a2 	rbit	r1, r2
 8003364:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003368:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800336c:	6011      	str	r1, [r2, #0]
  return result;
 800336e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003372:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	fab2 f282 	clz	r2, r2
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	f042 0220 	orr.w	r2, r2, #32
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	f002 021f 	and.w	r2, r2, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f202 	lsl.w	r2, r1, r2
 800338e:	4013      	ands	r3, r2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d087      	beq.n	80032a4 <HAL_RCC_OscConfig+0xd84>
 8003394:	e0ca      	b.n	800352c <HAL_RCC_OscConfig+0x100c>
 8003396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800339a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800339e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80033a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f2a3 	rbit	r2, r3
 80033b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033ba:	601a      	str	r2, [r3, #0]
  return result;
 80033bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80033c4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80033d0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	461a      	mov	r2, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fd ff4e 	bl	800127c <HAL_GetTick>
 80033e0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e4:	e009      	b.n	80033fa <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e6:	f7fd ff49 	bl	800127c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e099      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
 80033fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033fe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003402:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	fa93 f2a3 	rbit	r2, r3
 8003416:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800341e:	601a      	str	r2, [r3, #0]
  return result;
 8003420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003424:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003428:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342a:	fab3 f383 	clz	r3, r3
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b3f      	cmp	r3, #63	@ 0x3f
 8003432:	d802      	bhi.n	800343a <HAL_RCC_OscConfig+0xf1a>
 8003434:	4b2d      	ldr	r3, [pc, #180]	@ (80034ec <HAL_RCC_OscConfig+0xfcc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	e027      	b.n	800348a <HAL_RCC_OscConfig+0xf6a>
 800343a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003442:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003446:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800344c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	fa93 f2a3 	rbit	r2, r3
 8003456:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800345a:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003464:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003468:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003472:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	fa93 f2a3 	rbit	r2, r3
 800347c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003480:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	4b19      	ldr	r3, [pc, #100]	@ (80034ec <HAL_RCC_OscConfig+0xfcc>)
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800348e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003492:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003496:	6011      	str	r1, [r2, #0]
 8003498:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800349c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	fa92 f1a2 	rbit	r1, r2
 80034a6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034aa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034ae:	6011      	str	r1, [r2, #0]
  return result;
 80034b0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80034b4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	fab2 f282 	clz	r2, r2
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	f042 0220 	orr.w	r2, r2, #32
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	f002 021f 	and.w	r2, r2, #31
 80034ca:	2101      	movs	r1, #1
 80034cc:	fa01 f202 	lsl.w	r2, r1, r2
 80034d0:	4013      	ands	r3, r2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d187      	bne.n	80033e6 <HAL_RCC_OscConfig+0xec6>
 80034d6:	e029      	b.n	800352c <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d103      	bne.n	80034f0 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e020      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
 80034ec:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f0:	4b11      	ldr	r3, [pc, #68]	@ (8003538 <HAL_RCC_OscConfig+0x1018>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80034f8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80034fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003504:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	429a      	cmp	r2, r3
 800350e:	d10b      	bne.n	8003528 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003510:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003514:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003518:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800351c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40021000 	.word	0x40021000

0800353c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b09e      	sub	sp, #120	@ 0x78
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e154      	b.n	80037fe <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b89      	ldr	r3, [pc, #548]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d910      	bls.n	8003584 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b86      	ldr	r3, [pc, #536]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 0207 	bic.w	r2, r3, #7
 800356a:	4984      	ldr	r1, [pc, #528]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	4313      	orrs	r3, r2
 8003570:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003572:	4b82      	ldr	r3, [pc, #520]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	683a      	ldr	r2, [r7, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e13c      	b.n	80037fe <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d008      	beq.n	80035a2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003590:	4b7b      	ldr	r3, [pc, #492]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	4978      	ldr	r1, [pc, #480]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 80cd 	beq.w	800374a <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d137      	bne.n	8003628 <HAL_RCC_ClockConfig+0xec>
 80035b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80035c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c8:	fab3 f383 	clz	r3, r3
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80035d0:	d802      	bhi.n	80035d8 <HAL_RCC_ClockConfig+0x9c>
 80035d2:	4b6b      	ldr	r3, [pc, #428]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	e00f      	b.n	80035f8 <HAL_RCC_ClockConfig+0xbc>
 80035d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80035e6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80035ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80035ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035f4:	4b62      	ldr	r3, [pc, #392]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80035fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80035fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003600:	fa92 f2a2 	rbit	r2, r2
 8003604:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003606:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f042 0220 	orr.w	r2, r2, #32
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f002 021f 	and.w	r2, r2, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d171      	bne.n	8003708 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0ea      	b.n	80037fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d137      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x164>
 8003630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003634:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800363e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b3f      	cmp	r3, #63	@ 0x3f
 8003648:	d802      	bhi.n	8003650 <HAL_RCC_ClockConfig+0x114>
 800364a:	4b4d      	ldr	r3, [pc, #308]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	e00f      	b.n	8003670 <HAL_RCC_ClockConfig+0x134>
 8003650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003654:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
 800365e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003662:	643b      	str	r3, [r7, #64]	@ 0x40
 8003664:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800366c:	4b44      	ldr	r3, [pc, #272]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003674:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003678:	fa92 f2a2 	rbit	r2, r2
 800367c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800367e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003680:	fab2 f282 	clz	r2, r2
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	f042 0220 	orr.w	r2, r2, #32
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	f002 021f 	and.w	r2, r2, #31
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d135      	bne.n	8003708 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0ae      	b.n	80037fe <HAL_RCC_ClockConfig+0x2c2>
 80036a0:	2302      	movs	r3, #2
 80036a2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ae:	fab3 f383 	clz	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80036b6:	d802      	bhi.n	80036be <HAL_RCC_ClockConfig+0x182>
 80036b8:	4b31      	ldr	r3, [pc, #196]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	e00d      	b.n	80036da <HAL_RCC_ClockConfig+0x19e>
 80036be:	2302      	movs	r3, #2
 80036c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ca:	2302      	movs	r3, #2
 80036cc:	623b      	str	r3, [r7, #32]
 80036ce:	6a3b      	ldr	r3, [r7, #32]
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	2202      	movs	r2, #2
 80036dc:	61ba      	str	r2, [r7, #24]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	fa92 f2a2 	rbit	r2, r2
 80036e4:	617a      	str	r2, [r7, #20]
  return result;
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	fab2 f282 	clz	r2, r2
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	f042 0220 	orr.w	r2, r2, #32
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	f002 021f 	and.w	r2, r2, #31
 80036f8:	2101      	movs	r1, #1
 80036fa:	fa01 f202 	lsl.w	r2, r1, r2
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e07a      	b.n	80037fe <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003708:	4b1d      	ldr	r3, [pc, #116]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 0203 	bic.w	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	491a      	ldr	r1, [pc, #104]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 8003716:	4313      	orrs	r3, r2
 8003718:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800371a:	f7fd fdaf 	bl	800127c <HAL_GetTick>
 800371e:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003720:	e00a      	b.n	8003738 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003722:	f7fd fdab 	bl	800127c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003730:	4293      	cmp	r3, r2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e062      	b.n	80037fe <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <HAL_RCC_ClockConfig+0x244>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 020c 	and.w	r2, r3, #12
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	429a      	cmp	r2, r3
 8003748:	d1eb      	bne.n	8003722 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800374a:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d215      	bcs.n	8003784 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003758:	4b08      	ldr	r3, [pc, #32]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 0207 	bic.w	r2, r3, #7
 8003760:	4906      	ldr	r1, [pc, #24]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	4313      	orrs	r3, r2
 8003766:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <HAL_RCC_ClockConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d006      	beq.n	8003784 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e041      	b.n	80037fe <HAL_RCC_ClockConfig+0x2c2>
 800377a:	bf00      	nop
 800377c:	40022000 	.word	0x40022000
 8003780:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003790:	4b1d      	ldr	r3, [pc, #116]	@ (8003808 <HAL_RCC_ClockConfig+0x2cc>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	491a      	ldr	r1, [pc, #104]	@ (8003808 <HAL_RCC_ClockConfig+0x2cc>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ae:	4b16      	ldr	r3, [pc, #88]	@ (8003808 <HAL_RCC_ClockConfig+0x2cc>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4912      	ldr	r1, [pc, #72]	@ (8003808 <HAL_RCC_ClockConfig+0x2cc>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80037c2:	f000 f829 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80037c6:	4601      	mov	r1, r0
 80037c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <HAL_RCC_ClockConfig+0x2cc>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d0:	22f0      	movs	r2, #240	@ 0xf0
 80037d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	fa92 f2a2 	rbit	r2, r2
 80037da:	60fa      	str	r2, [r7, #12]
  return result;
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	fab2 f282 	clz	r2, r2
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	40d3      	lsrs	r3, r2
 80037e6:	4a09      	ldr	r2, [pc, #36]	@ (800380c <HAL_RCC_ClockConfig+0x2d0>)
 80037e8:	5cd3      	ldrb	r3, [r2, r3]
 80037ea:	fa21 f303 	lsr.w	r3, r1, r3
 80037ee:	4a08      	ldr	r2, [pc, #32]	@ (8003810 <HAL_RCC_ClockConfig+0x2d4>)
 80037f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80037f2:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <HAL_RCC_ClockConfig+0x2d8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fcfc 	bl	80011f4 <HAL_InitTick>
  
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3778      	adds	r7, #120	@ 0x78
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	0800659c 	.word	0x0800659c
 8003810:	20000000 	.word	0x20000000
 8003814:	20000004 	.word	0x20000004

08003818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003832:	4b1e      	ldr	r3, [pc, #120]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x94>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 030c 	and.w	r3, r3, #12
 800383e:	2b04      	cmp	r3, #4
 8003840:	d002      	beq.n	8003848 <HAL_RCC_GetSysClockFreq+0x30>
 8003842:	2b08      	cmp	r3, #8
 8003844:	d003      	beq.n	800384e <HAL_RCC_GetSysClockFreq+0x36>
 8003846:	e026      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003848:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800384a:	613b      	str	r3, [r7, #16]
      break;
 800384c:	e026      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0c9b      	lsrs	r3, r3, #18
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	4a17      	ldr	r2, [pc, #92]	@ (80038b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800385c:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <HAL_RCC_GetSysClockFreq+0x94>)
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	4a14      	ldr	r2, [pc, #80]	@ (80038b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003866:	5cd3      	ldrb	r3, [r2, r3]
 8003868:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003874:	4a0e      	ldr	r2, [pc, #56]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	fbb2 f2f3 	udiv	r2, r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	fb02 f303 	mul.w	r3, r2, r3
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e004      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a0c      	ldr	r2, [pc, #48]	@ (80038bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
      break;
 8003894:	e002      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003896:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003898:	613b      	str	r3, [r7, #16]
      break;
 800389a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800389c:	693b      	ldr	r3, [r7, #16]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40021000 	.word	0x40021000
 80038b0:	007a1200 	.word	0x007a1200
 80038b4:	080065b4 	.word	0x080065b4
 80038b8:	080065c4 	.word	0x080065c4
 80038bc:	003d0900 	.word	0x003d0900

080038c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038c4:	4b03      	ldr	r3, [pc, #12]	@ (80038d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000000 	.word	0x20000000

080038d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80038de:	f7ff ffef 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 80038e2:	4601      	mov	r1, r0
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038ec:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80038f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	fa92 f2a2 	rbit	r2, r2
 80038f8:	603a      	str	r2, [r7, #0]
  return result;
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	fab2 f282 	clz	r2, r2
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	40d3      	lsrs	r3, r2
 8003904:	4a04      	ldr	r2, [pc, #16]	@ (8003918 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	40021000 	.word	0x40021000
 8003918:	080065ac 	.word	0x080065ac

0800391c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003922:	f7ff ffcd 	bl	80038c0 <HAL_RCC_GetHCLKFreq>
 8003926:	4601      	mov	r1, r0
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003930:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003934:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	fa92 f2a2 	rbit	r2, r2
 800393c:	603a      	str	r2, [r7, #0]
  return result;
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	fab2 f282 	clz	r2, r2
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	40d3      	lsrs	r3, r2
 8003948:	4a04      	ldr	r2, [pc, #16]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x40>)
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	080065ac 	.word	0x080065ac

08003960 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b092      	sub	sp, #72	@ 0x48
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003970:	2300      	movs	r3, #0
 8003972:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 80cb 	beq.w	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003984:	4b85      	ldr	r3, [pc, #532]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10e      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003990:	4b82      	ldr	r3, [pc, #520]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4a81      	ldr	r2, [pc, #516]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800399a:	61d3      	str	r3, [r2, #28]
 800399c:	4b7f      	ldr	r3, [pc, #508]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d118      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ba:	4b79      	ldr	r3, [pc, #484]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a78      	ldr	r2, [pc, #480]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039c6:	f7fd fc59 	bl	800127c <HAL_GetTick>
 80039ca:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	e008      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ce:	f7fd fc55 	bl	800127c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	@ 0x64
 80039da:	d901      	bls.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e0d9      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e0:	4b6f      	ldr	r3, [pc, #444]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0f0      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039ec:	4b6b      	ldr	r3, [pc, #428]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d07b      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x194>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d074      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a0a:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a18:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a1c:	fa93 f3a3 	rbit	r3, r3
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	2301      	movs	r3, #1
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a40:	fa93 f3a3 	rbit	r3, r3
 8003a44:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a48:	fab3 f383 	clz	r3, r3
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4b54      	ldr	r3, [pc, #336]	@ (8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	461a      	mov	r2, r3
 8003a58:	2300      	movs	r3, #0
 8003a5a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a5c:	4a4f      	ldr	r2, [pc, #316]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a60:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d043      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fc06 	bl	800127c <HAL_GetTick>
 8003a70:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	e00a      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fc02 	bl	800127c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e084      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a90:	fa93 f3a3 	rbit	r3, r3
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a96:	2302      	movs	r3, #2
 8003a98:	623b      	str	r3, [r7, #32]
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	fa93 f3a3 	rbit	r3, r3
 8003aa0:	61fb      	str	r3, [r7, #28]
  return result;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	fab3 f383 	clz	r3, r3
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003ab4:	4b39      	ldr	r3, [pc, #228]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	e007      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	4b35      	ldr	r3, [pc, #212]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aca:	2202      	movs	r2, #2
 8003acc:	613a      	str	r2, [r7, #16]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	fa92 f2a2 	rbit	r2, r2
 8003ad4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f002 021f 	and.w	r2, r2, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0bf      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003af4:	4b29      	ldr	r3, [pc, #164]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	4926      	ldr	r1, [pc, #152]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b06:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0e:	4b23      	ldr	r3, [pc, #140]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	4a22      	ldr	r2, [pc, #136]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b26:	4b1d      	ldr	r3, [pc, #116]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b2a:	f023 0203 	bic.w	r2, r3, #3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	491a      	ldr	r1, [pc, #104]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d008      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b48:	f023 0210 	bic.w	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4912      	ldr	r1, [pc, #72]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d008      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	490b      	ldr	r1, [pc, #44]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003b80:	4b06      	ldr	r3, [pc, #24]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3748      	adds	r7, #72	@ 0x48
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	40007000 	.word	0x40007000
 8003ba4:	10908100 	.word	0x10908100

08003ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e049      	b.n	8003c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd f88c 	bl	8000cec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3304      	adds	r3, #4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4610      	mov	r0, r2
 8003be8:	f000 fc3c 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b082      	sub	sp, #8
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e049      	b.n	8003cfc <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f841 	bl	8003d04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	4619      	mov	r1, r3
 8003c94:	4610      	mov	r0, r2
 8003c96:	f000 fbe5 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e049      	b.n	8003dbe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f841 	bl	8003dc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2202      	movs	r2, #2
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3304      	adds	r3, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f000 fb84 	bl	8004464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_PWM_Start+0x24>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e03c      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d109      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x3e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e02f      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d109      	bne.n	8003e34 <HAL_TIM_PWM_Start+0x58>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e022      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d109      	bne.n	8003e4e <HAL_TIM_PWM_Start+0x72>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	bf14      	ite	ne
 8003e46:	2301      	movne	r3, #1
 8003e48:	2300      	moveq	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	e015      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b10      	cmp	r3, #16
 8003e52:	d109      	bne.n	8003e68 <HAL_TIM_PWM_Start+0x8c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	bf14      	ite	ne
 8003e60:	2301      	movne	r3, #1
 8003e62:	2300      	moveq	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e008      	b.n	8003e7a <HAL_TIM_PWM_Start+0x9e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e088      	b.n	8003f94 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_PWM_Start+0xb6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e90:	e023      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xc6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ea0:	e01b      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_PWM_Start+0xd6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003eb0:	e013      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d104      	bne.n	8003ec2 <HAL_TIM_PWM_Start+0xe6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ec0:	e00b      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d104      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0xf6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ed0:	e003      	b.n	8003eda <HAL_TIM_PWM_Start+0xfe>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	6839      	ldr	r1, [r7, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fe82 	bl	8004bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2b      	ldr	r2, [pc, #172]	@ (8003f9c <HAL_TIM_PWM_Start+0x1c0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_TIM_PWM_Start+0x134>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa0 <HAL_TIM_PWM_Start+0x1c4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_TIM_PWM_Start+0x134>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a28      	ldr	r2, [pc, #160]	@ (8003fa4 <HAL_TIM_PWM_Start+0x1c8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIM_PWM_Start+0x134>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a27      	ldr	r2, [pc, #156]	@ (8003fa8 <HAL_TIM_PWM_Start+0x1cc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_PWM_Start+0x138>
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_TIM_PWM_Start+0x13a>
 8003f14:	2300      	movs	r3, #0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f9c <HAL_TIM_PWM_Start+0x1c0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x176>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x176>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1a      	ldr	r2, [pc, #104]	@ (8003fac <HAL_TIM_PWM_Start+0x1d0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_PWM_Start+0x176>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a14      	ldr	r2, [pc, #80]	@ (8003fa0 <HAL_TIM_PWM_Start+0x1c4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d115      	bne.n	8003f7e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <HAL_TIM_PWM_Start+0x1d4>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d015      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x1b4>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f6a:	d011      	beq.n	8003f90 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7c:	e008      	b.n	8003f90 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e000      	b.n	8003f92 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	40014000 	.word	0x40014000
 8003fa4:	40014400 	.word	0x40014400
 8003fa8:	40014800 	.word	0x40014800
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	00010007 	.word	0x00010007

08003fb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e066      	b.n	80040a0 <HAL_TIM_OC_ConfigChannel+0xec>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b14      	cmp	r3, #20
 8003fde:	d857      	bhi.n	8004090 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800403d 	.word	0x0800403d
 8003fec:	08004091 	.word	0x08004091
 8003ff0:	08004091 	.word	0x08004091
 8003ff4:	08004091 	.word	0x08004091
 8003ff8:	0800404b 	.word	0x0800404b
 8003ffc:	08004091 	.word	0x08004091
 8004000:	08004091 	.word	0x08004091
 8004004:	08004091 	.word	0x08004091
 8004008:	08004059 	.word	0x08004059
 800400c:	08004091 	.word	0x08004091
 8004010:	08004091 	.word	0x08004091
 8004014:	08004091 	.word	0x08004091
 8004018:	08004067 	.word	0x08004067
 800401c:	08004091 	.word	0x08004091
 8004020:	08004091 	.word	0x08004091
 8004024:	08004091 	.word	0x08004091
 8004028:	08004075 	.word	0x08004075
 800402c:	08004091 	.word	0x08004091
 8004030:	08004091 	.word	0x08004091
 8004034:	08004091 	.word	0x08004091
 8004038:	08004083 	.word	0x08004083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fa92 	bl	800456c <TIM_OC1_SetConfig>
      break;
 8004048:	e025      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fb11 	bl	8004678 <TIM_OC2_SetConfig>
      break;
 8004056:	e01e      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fb8a 	bl	8004778 <TIM_OC3_SetConfig>
      break;
 8004064:	e017      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fc01 	bl	8004874 <TIM_OC4_SetConfig>
      break;
 8004072:	e010      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fc5e 	bl	800493c <TIM_OC5_SetConfig>
      break;
 8004080:	e009      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fcb5 	bl	80049f8 <TIM_OC6_SetConfig>
      break;
 800408e:	e002      	b.n	8004096 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	75fb      	strb	r3, [r7, #23]
      break;
 8004094:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e0ff      	b.n	80042c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b14      	cmp	r3, #20
 80040d2:	f200 80f0 	bhi.w	80042b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040d6:	a201      	add	r2, pc, #4	@ (adr r2, 80040dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	08004131 	.word	0x08004131
 80040e0:	080042b7 	.word	0x080042b7
 80040e4:	080042b7 	.word	0x080042b7
 80040e8:	080042b7 	.word	0x080042b7
 80040ec:	08004171 	.word	0x08004171
 80040f0:	080042b7 	.word	0x080042b7
 80040f4:	080042b7 	.word	0x080042b7
 80040f8:	080042b7 	.word	0x080042b7
 80040fc:	080041b3 	.word	0x080041b3
 8004100:	080042b7 	.word	0x080042b7
 8004104:	080042b7 	.word	0x080042b7
 8004108:	080042b7 	.word	0x080042b7
 800410c:	080041f3 	.word	0x080041f3
 8004110:	080042b7 	.word	0x080042b7
 8004114:	080042b7 	.word	0x080042b7
 8004118:	080042b7 	.word	0x080042b7
 800411c:	08004235 	.word	0x08004235
 8004120:	080042b7 	.word	0x080042b7
 8004124:	080042b7 	.word	0x080042b7
 8004128:	080042b7 	.word	0x080042b7
 800412c:	08004275 	.word	0x08004275
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fa18 	bl	800456c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	619a      	str	r2, [r3, #24]
      break;
 800416e:	e0a5      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa7e 	bl	8004678 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800418a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800419a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	619a      	str	r2, [r3, #24]
      break;
 80041b0:	e084      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fadd 	bl	8004778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0208 	orr.w	r2, r2, #8
 80041cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0204 	bic.w	r2, r2, #4
 80041dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	61da      	str	r2, [r3, #28]
      break;
 80041f0:	e064      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fb3b 	bl	8004874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800420c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800421c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	61da      	str	r2, [r3, #28]
      break;
 8004232:	e043      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fb7e 	bl	800493c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0208 	orr.w	r2, r2, #8
 800424e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	691a      	ldr	r2, [r3, #16]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004272:	e023      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fbbc 	bl	80049f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800428e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800429e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	021a      	lsls	r2, r3, #8
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80042b4:	e002      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	75fb      	strb	r3, [r7, #23]
      break;
 80042ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b6      	b.n	800445a <HAL_TIM_ConfigClockSource+0x18a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800430e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004328:	d03e      	beq.n	80043a8 <HAL_TIM_ConfigClockSource+0xd8>
 800432a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432e:	f200 8087 	bhi.w	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004336:	f000 8086 	beq.w	8004446 <HAL_TIM_ConfigClockSource+0x176>
 800433a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433e:	d87f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004340:	2b70      	cmp	r3, #112	@ 0x70
 8004342:	d01a      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xaa>
 8004344:	2b70      	cmp	r3, #112	@ 0x70
 8004346:	d87b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d050      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x11e>
 800434c:	2b60      	cmp	r3, #96	@ 0x60
 800434e:	d877      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d03c      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0xfe>
 8004354:	2b50      	cmp	r3, #80	@ 0x50
 8004356:	d873      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d058      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x13e>
 800435c:	2b40      	cmp	r3, #64	@ 0x40
 800435e:	d86f      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d064      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004364:	2b30      	cmp	r3, #48	@ 0x30
 8004366:	d86b      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d060      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 800436c:	2b20      	cmp	r3, #32
 800436e:	d867      	bhi.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004374:	2b10      	cmp	r3, #16
 8004376:	d05a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x15e>
 8004378:	e062      	b.n	8004440 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438a:	f000 fc0f 	bl	8004bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800439c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	609a      	str	r2, [r3, #8]
      break;
 80043a6:	e04f      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b8:	f000 fbf8 	bl	8004bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043ca:	609a      	str	r2, [r3, #8]
      break;
 80043cc:	e03c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 fb6c 	bl	8004ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2150      	movs	r1, #80	@ 0x50
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fbc5 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e02c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 fb8b 	bl	8004b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2160      	movs	r1, #96	@ 0x60
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fbb5 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 800440c:	e01c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800441a:	461a      	mov	r2, r3
 800441c:	f000 fb4c 	bl	8004ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2140      	movs	r1, #64	@ 0x40
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fba5 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 800442c:	e00c      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f000 fb9c 	bl	8004b76 <TIM_ITRx_SetConfig>
      break;
 800443e:	e003      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      break;
 8004444:	e000      	b.n	8004448 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a38      	ldr	r2, [pc, #224]	@ (8004558 <TIM_Base_SetConfig+0xf4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d007      	beq.n	800448c <TIM_Base_SetConfig+0x28>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004482:	d003      	beq.n	800448c <TIM_Base_SetConfig+0x28>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a35      	ldr	r2, [pc, #212]	@ (800455c <TIM_Base_SetConfig+0xf8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d108      	bne.n	800449e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004558 <TIM_Base_SetConfig+0xf4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d013      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ac:	d00f      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2a      	ldr	r2, [pc, #168]	@ (800455c <TIM_Base_SetConfig+0xf8>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00b      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a29      	ldr	r2, [pc, #164]	@ (8004560 <TIM_Base_SetConfig+0xfc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a28      	ldr	r2, [pc, #160]	@ (8004564 <TIM_Base_SetConfig+0x100>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d003      	beq.n	80044ce <TIM_Base_SetConfig+0x6a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a27      	ldr	r2, [pc, #156]	@ (8004568 <TIM_Base_SetConfig+0x104>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d108      	bne.n	80044e0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <TIM_Base_SetConfig+0xf4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0xc0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a14      	ldr	r2, [pc, #80]	@ (8004560 <TIM_Base_SetConfig+0xfc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0xc0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a13      	ldr	r2, [pc, #76]	@ (8004564 <TIM_Base_SetConfig+0x100>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0xc0>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a12      	ldr	r2, [pc, #72]	@ (8004568 <TIM_Base_SetConfig+0x104>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d105      	bne.n	800454a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]
  }
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40014000 	.word	0x40014000
 8004564:	40014400 	.word	0x40014400
 8004568:	40014800 	.word	0x40014800

0800456c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f023 0201 	bic.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 0303 	bic.w	r3, r3, #3
 80045a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f023 0302 	bic.w	r3, r3, #2
 80045b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a28      	ldr	r2, [pc, #160]	@ (8004668 <TIM_OC1_SetConfig+0xfc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00b      	beq.n	80045e4 <TIM_OC1_SetConfig+0x78>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a27      	ldr	r2, [pc, #156]	@ (800466c <TIM_OC1_SetConfig+0x100>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d007      	beq.n	80045e4 <TIM_OC1_SetConfig+0x78>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a26      	ldr	r2, [pc, #152]	@ (8004670 <TIM_OC1_SetConfig+0x104>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_OC1_SetConfig+0x78>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a25      	ldr	r2, [pc, #148]	@ (8004674 <TIM_OC1_SetConfig+0x108>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10c      	bne.n	80045fe <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f023 0308 	bic.w	r3, r3, #8
 80045ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f023 0304 	bic.w	r3, r3, #4
 80045fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a19      	ldr	r2, [pc, #100]	@ (8004668 <TIM_OC1_SetConfig+0xfc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00b      	beq.n	800461e <TIM_OC1_SetConfig+0xb2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a18      	ldr	r2, [pc, #96]	@ (800466c <TIM_OC1_SetConfig+0x100>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d007      	beq.n	800461e <TIM_OC1_SetConfig+0xb2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a17      	ldr	r2, [pc, #92]	@ (8004670 <TIM_OC1_SetConfig+0x104>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_OC1_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a16      	ldr	r2, [pc, #88]	@ (8004674 <TIM_OC1_SetConfig+0x108>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d111      	bne.n	8004642 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	621a      	str	r2, [r3, #32]
}
 800465c:	bf00      	nop
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800

08004678 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	f023 0210 	bic.w	r2, r3, #16
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	021b      	lsls	r3, r3, #8
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	4313      	orrs	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0320 	bic.w	r3, r3, #32
 80046c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a24      	ldr	r2, [pc, #144]	@ (8004768 <TIM_OC2_SetConfig+0xf0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d10d      	bne.n	80046f8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004768 <TIM_OC2_SetConfig+0xf0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00b      	beq.n	8004718 <TIM_OC2_SetConfig+0xa0>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a1a      	ldr	r2, [pc, #104]	@ (800476c <TIM_OC2_SetConfig+0xf4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d007      	beq.n	8004718 <TIM_OC2_SetConfig+0xa0>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a19      	ldr	r2, [pc, #100]	@ (8004770 <TIM_OC2_SetConfig+0xf8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d003      	beq.n	8004718 <TIM_OC2_SetConfig+0xa0>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a18      	ldr	r2, [pc, #96]	@ (8004774 <TIM_OC2_SetConfig+0xfc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d113      	bne.n	8004740 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800471e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004726:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685a      	ldr	r2, [r3, #4]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	621a      	str	r2, [r3, #32]
}
 800475a:	bf00      	nop
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40012c00 	.word	0x40012c00
 800476c:	40014000 	.word	0x40014000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800

08004778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	021b      	lsls	r3, r3, #8
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a23      	ldr	r2, [pc, #140]	@ (8004864 <TIM_OC3_SetConfig+0xec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10d      	bne.n	80047f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047f4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004864 <TIM_OC3_SetConfig+0xec>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_OC3_SetConfig+0x9e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a19      	ldr	r2, [pc, #100]	@ (8004868 <TIM_OC3_SetConfig+0xf0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_OC3_SetConfig+0x9e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a18      	ldr	r2, [pc, #96]	@ (800486c <TIM_OC3_SetConfig+0xf4>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_OC3_SetConfig+0x9e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a17      	ldr	r2, [pc, #92]	@ (8004870 <TIM_OC3_SetConfig+0xf8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d113      	bne.n	800483e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800481c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	693a      	ldr	r2, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	621a      	str	r2, [r3, #32]
}
 8004858:	bf00      	nop
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40014000 	.word	0x40014000
 800486c:	40014400 	.word	0x40014400
 8004870:	40014800 	.word	0x40014800

08004874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	031b      	lsls	r3, r3, #12
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a16      	ldr	r2, [pc, #88]	@ (800492c <TIM_OC4_SetConfig+0xb8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00b      	beq.n	80048f0 <TIM_OC4_SetConfig+0x7c>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a15      	ldr	r2, [pc, #84]	@ (8004930 <TIM_OC4_SetConfig+0xbc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d007      	beq.n	80048f0 <TIM_OC4_SetConfig+0x7c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a14      	ldr	r2, [pc, #80]	@ (8004934 <TIM_OC4_SetConfig+0xc0>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <TIM_OC4_SetConfig+0x7c>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a13      	ldr	r2, [pc, #76]	@ (8004938 <TIM_OC4_SetConfig+0xc4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d109      	bne.n	8004904 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	019b      	lsls	r3, r3, #6
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	4313      	orrs	r3, r2
 8004902:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	40012c00 	.word	0x40012c00
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800

0800493c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	041b      	lsls	r3, r3, #16
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <TIM_OC5_SetConfig+0xac>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_OC5_SetConfig+0x72>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	@ (80049ec <TIM_OC5_SetConfig+0xb0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d007      	beq.n	80049ae <TIM_OC5_SetConfig+0x72>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a13      	ldr	r2, [pc, #76]	@ (80049f0 <TIM_OC5_SetConfig+0xb4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_OC5_SetConfig+0x72>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <TIM_OC5_SetConfig+0xb8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d109      	bne.n	80049c2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	4313      	orrs	r3, r2
 80049c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	621a      	str	r2, [r3, #32]
}
 80049dc:	bf00      	nop
 80049de:	371c      	adds	r7, #28
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr
 80049e8:	40012c00 	.word	0x40012c00
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	051b      	lsls	r3, r3, #20
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	@ (8004aa8 <TIM_OC6_SetConfig+0xb0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_OC6_SetConfig+0x74>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a15      	ldr	r2, [pc, #84]	@ (8004aac <TIM_OC6_SetConfig+0xb4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_OC6_SetConfig+0x74>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a14      	ldr	r2, [pc, #80]	@ (8004ab0 <TIM_OC6_SetConfig+0xb8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_OC6_SetConfig+0x74>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a13      	ldr	r2, [pc, #76]	@ (8004ab4 <TIM_OC6_SetConfig+0xbc>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d109      	bne.n	8004a80 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40014000 	.word	0x40014000
 8004ab0:	40014400 	.word	0x40014400
 8004ab4:	40014800 	.word	0x40014800

08004ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f023 030a 	bic.w	r3, r3, #10
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b087      	sub	sp, #28
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 0210 	bic.w	r2, r3, #16
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	f043 0307 	orr.w	r3, r3, #7
 8004b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	021a      	lsls	r2, r3, #8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	609a      	str	r2, [r3, #8]
}
 8004be0:	bf00      	nop
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f003 031f 	and.w	r3, r3, #31
 8004bfe:	2201      	movs	r2, #1
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a1a      	ldr	r2, [r3, #32]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	401a      	ands	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a1a      	ldr	r2, [r3, #32]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 031f 	and.w	r3, r3, #31
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	fa01 f303 	lsl.w	r3, r1, r3
 8004c24:	431a      	orrs	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e054      	b.n	8004cfa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a24      	ldr	r2, [pc, #144]	@ (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d108      	bne.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a17      	ldr	r2, [pc, #92]	@ (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00e      	beq.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb8:	d009      	beq.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d004      	beq.n	8004cce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a11      	ldr	r2, [pc, #68]	@ (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40014000 	.word	0x40014000

08004d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d101      	bne.n	8004d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d2c:	2302      	movs	r3, #2
 8004d2e:	e060      	b.n	8004df2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	4313      	orrs	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a14      	ldr	r2, [pc, #80]	@ (8004e00 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d115      	bne.n	8004de0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	051b      	lsls	r3, r3, #20
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40012c00 	.word	0x40012c00

08004e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e040      	b.n	8004e98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fc f88c 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	@ 0x24
 8004e30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f9e8 	bl	8005220 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f8af 	bl	8004fb4 <UART_SetConfig>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d101      	bne.n	8004e60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e01b      	b.n	8004e98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fa67 	bl	8005364 <UART_CheckIdleState>
 8004e96:	4603      	mov	r3, r0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	@ 0x28
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	4613      	mov	r3, r2
 8004eae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d177      	bne.n	8004fa8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d002      	beq.n	8004ec4 <HAL_UART_Transmit+0x24>
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e070      	b.n	8004faa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2221      	movs	r2, #33	@ 0x21
 8004ed4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ed6:	f7fc f9d1 	bl	800127c <HAL_GetTick>
 8004eda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	88fa      	ldrh	r2, [r7, #6]
 8004ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef4:	d108      	bne.n	8004f08 <HAL_UART_Transmit+0x68>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e003      	b.n	8004f10 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f10:	e02f      	b.n	8004f72 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2180      	movs	r1, #128	@ 0x80
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fac9 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d004      	beq.n	8004f32 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e03b      	b.n	8004faa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10b      	bne.n	8004f50 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f44:	b292      	uxth	r2, r2
 8004f46:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	e007      	b.n	8004f60 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	781a      	ldrb	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1c9      	bne.n	8004f12 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	2140      	movs	r1, #64	@ 0x40
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fa93 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e005      	b.n	8004faa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
	...

08004fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b8a      	ldr	r3, [pc, #552]	@ (8005208 <UART_SetConfig+0x254>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	6979      	ldr	r1, [r7, #20]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a78      	ldr	r2, [pc, #480]	@ (800520c <UART_SetConfig+0x258>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d120      	bne.n	8005072 <UART_SetConfig+0xbe>
 8005030:	4b77      	ldr	r3, [pc, #476]	@ (8005210 <UART_SetConfig+0x25c>)
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	f003 0303 	and.w	r3, r3, #3
 8005038:	2b03      	cmp	r3, #3
 800503a:	d817      	bhi.n	800506c <UART_SetConfig+0xb8>
 800503c:	a201      	add	r2, pc, #4	@ (adr r2, 8005044 <UART_SetConfig+0x90>)
 800503e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005042:	bf00      	nop
 8005044:	08005055 	.word	0x08005055
 8005048:	08005061 	.word	0x08005061
 800504c:	08005067 	.word	0x08005067
 8005050:	0800505b 	.word	0x0800505b
 8005054:	2300      	movs	r3, #0
 8005056:	77fb      	strb	r3, [r7, #31]
 8005058:	e01d      	b.n	8005096 <UART_SetConfig+0xe2>
 800505a:	2302      	movs	r3, #2
 800505c:	77fb      	strb	r3, [r7, #31]
 800505e:	e01a      	b.n	8005096 <UART_SetConfig+0xe2>
 8005060:	2304      	movs	r3, #4
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e017      	b.n	8005096 <UART_SetConfig+0xe2>
 8005066:	2308      	movs	r3, #8
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e014      	b.n	8005096 <UART_SetConfig+0xe2>
 800506c:	2310      	movs	r3, #16
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e011      	b.n	8005096 <UART_SetConfig+0xe2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a67      	ldr	r2, [pc, #412]	@ (8005214 <UART_SetConfig+0x260>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d102      	bne.n	8005082 <UART_SetConfig+0xce>
 800507c:	2300      	movs	r3, #0
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e009      	b.n	8005096 <UART_SetConfig+0xe2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a64      	ldr	r2, [pc, #400]	@ (8005218 <UART_SetConfig+0x264>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d102      	bne.n	8005092 <UART_SetConfig+0xde>
 800508c:	2300      	movs	r3, #0
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e001      	b.n	8005096 <UART_SetConfig+0xe2>
 8005092:	2310      	movs	r3, #16
 8005094:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800509e:	d15a      	bne.n	8005156 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80050a0:	7ffb      	ldrb	r3, [r7, #31]
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d827      	bhi.n	80050f6 <UART_SetConfig+0x142>
 80050a6:	a201      	add	r2, pc, #4	@ (adr r2, 80050ac <UART_SetConfig+0xf8>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d9 	.word	0x080050d9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f7 	.word	0x080050f7
 80050bc:	080050e7 	.word	0x080050e7
 80050c0:	080050f7 	.word	0x080050f7
 80050c4:	080050f7 	.word	0x080050f7
 80050c8:	080050f7 	.word	0x080050f7
 80050cc:	080050ef 	.word	0x080050ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe fc02 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 80050d4:	61b8      	str	r0, [r7, #24]
        break;
 80050d6:	e013      	b.n	8005100 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d8:	f7fe fc20 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 80050dc:	61b8      	str	r0, [r7, #24]
        break;
 80050de:	e00f      	b.n	8005100 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050e0:	4b4e      	ldr	r3, [pc, #312]	@ (800521c <UART_SetConfig+0x268>)
 80050e2:	61bb      	str	r3, [r7, #24]
        break;
 80050e4:	e00c      	b.n	8005100 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050e6:	f7fe fb97 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80050ea:	61b8      	str	r0, [r7, #24]
        break;
 80050ec:	e008      	b.n	8005100 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050f2:	61bb      	str	r3, [r7, #24]
        break;
 80050f4:	e004      	b.n	8005100 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	77bb      	strb	r3, [r7, #30]
        break;
 80050fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d074      	beq.n	80051f0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	005a      	lsls	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	085b      	lsrs	r3, r3, #1
 8005110:	441a      	add	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b0f      	cmp	r3, #15
 8005120:	d916      	bls.n	8005150 <UART_SetConfig+0x19c>
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005128:	d212      	bcs.n	8005150 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f023 030f 	bic.w	r3, r3, #15
 8005132:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	085b      	lsrs	r3, r3, #1
 8005138:	b29b      	uxth	r3, r3
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	b29a      	uxth	r2, r3
 8005140:	89fb      	ldrh	r3, [r7, #14]
 8005142:	4313      	orrs	r3, r2
 8005144:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	89fa      	ldrh	r2, [r7, #14]
 800514c:	60da      	str	r2, [r3, #12]
 800514e:	e04f      	b.n	80051f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	77bb      	strb	r3, [r7, #30]
 8005154:	e04c      	b.n	80051f0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005156:	7ffb      	ldrb	r3, [r7, #31]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d828      	bhi.n	80051ae <UART_SetConfig+0x1fa>
 800515c:	a201      	add	r2, pc, #4	@ (adr r2, 8005164 <UART_SetConfig+0x1b0>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005189 	.word	0x08005189
 8005168:	08005191 	.word	0x08005191
 800516c:	08005199 	.word	0x08005199
 8005170:	080051af 	.word	0x080051af
 8005174:	0800519f 	.word	0x0800519f
 8005178:	080051af 	.word	0x080051af
 800517c:	080051af 	.word	0x080051af
 8005180:	080051af 	.word	0x080051af
 8005184:	080051a7 	.word	0x080051a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005188:	f7fe fba6 	bl	80038d8 <HAL_RCC_GetPCLK1Freq>
 800518c:	61b8      	str	r0, [r7, #24]
        break;
 800518e:	e013      	b.n	80051b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005190:	f7fe fbc4 	bl	800391c <HAL_RCC_GetPCLK2Freq>
 8005194:	61b8      	str	r0, [r7, #24]
        break;
 8005196:	e00f      	b.n	80051b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005198:	4b20      	ldr	r3, [pc, #128]	@ (800521c <UART_SetConfig+0x268>)
 800519a:	61bb      	str	r3, [r7, #24]
        break;
 800519c:	e00c      	b.n	80051b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519e:	f7fe fb3b 	bl	8003818 <HAL_RCC_GetSysClockFreq>
 80051a2:	61b8      	str	r0, [r7, #24]
        break;
 80051a4:	e008      	b.n	80051b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051aa:	61bb      	str	r3, [r7, #24]
        break;
 80051ac:	e004      	b.n	80051b8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	77bb      	strb	r3, [r7, #30]
        break;
 80051b6:	bf00      	nop
    }

    if (pclk != 0U)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d018      	beq.n	80051f0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	085a      	lsrs	r2, r3, #1
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	441a      	add	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b0f      	cmp	r3, #15
 80051d6:	d909      	bls.n	80051ec <UART_SetConfig+0x238>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051de:	d205      	bcs.n	80051ec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	e001      	b.n	80051f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	efff69f3 	.word	0xefff69f3
 800520c:	40013800 	.word	0x40013800
 8005210:	40021000 	.word	0x40021000
 8005214:	40004400 	.word	0x40004400
 8005218:	40004800 	.word	0x40004800
 800521c:	007a1200 	.word	0x007a1200

08005220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01a      	beq.n	8005336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800531e:	d10a      	bne.n	8005336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  }
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b098      	sub	sp, #96	@ 0x60
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005374:	f7fb ff82 	bl	800127c <HAL_GetTick>
 8005378:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b08      	cmp	r3, #8
 8005386:	d12e      	bne.n	80053e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005390:	2200      	movs	r2, #0
 8005392:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f88c 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d021      	beq.n	80053e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	e853 3f00 	ldrex	r3, [r3]
 80053ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e6      	bne.n	80053a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e062      	b.n	80054ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0304 	and.w	r3, r3, #4
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d149      	bne.n	8005488 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053fc:	2200      	movs	r2, #0
 80053fe:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f856 	bl	80054b4 <UART_WaitOnFlagUntilTimeout>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d03c      	beq.n	8005488 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	623b      	str	r3, [r7, #32]
   return(result);
 800541c:	6a3b      	ldr	r3, [r7, #32]
 800541e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800542c:	633b      	str	r3, [r7, #48]	@ 0x30
 800542e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e6      	bne.n	800540e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3308      	adds	r3, #8
 8005446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0301 	bic.w	r3, r3, #1
 8005456:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	3308      	adds	r3, #8
 800545e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005460:	61fa      	str	r2, [r7, #28]
 8005462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	617b      	str	r3, [r7, #20]
   return(result);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e5      	bne.n	8005440 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e011      	b.n	80054ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2220      	movs	r2, #32
 8005492:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3758      	adds	r7, #88	@ 0x58
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c4:	e04f      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054cc:	d04b      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ce:	f7fb fed5 	bl	800127c <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e04e      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d037      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	2b80      	cmp	r3, #128	@ 0x80
 80054fa:	d034      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b40      	cmp	r3, #64	@ 0x40
 8005500:	d031      	beq.n	8005566 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b08      	cmp	r3, #8
 800550e:	d110      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2208      	movs	r2, #8
 8005516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f838 	bl	800558e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2208      	movs	r2, #8
 8005522:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e029      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800553c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005540:	d111      	bne.n	8005566 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800554a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f000 f81e 	bl	800558e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e00f      	b.n	8005586 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	429a      	cmp	r2, r3
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	429a      	cmp	r2, r3
 8005582:	d0a0      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800558e:	b480      	push	{r7}
 8005590:	b095      	sub	sp, #84	@ 0x54
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559e:	e853 3f00 	ldrex	r3, [r3]
 80055a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	461a      	mov	r2, r3
 80055b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055bc:	e841 2300 	strex	r3, r2, [r1]
 80055c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1e6      	bne.n	8005596 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	3308      	adds	r3, #8
 80055ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	e853 3f00 	ldrex	r3, [r3]
 80055d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f023 0301 	bic.w	r3, r3, #1
 80055de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f0:	e841 2300 	strex	r3, r2, [r1]
 80055f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e5      	bne.n	80055c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005600:	2b01      	cmp	r3, #1
 8005602:	d118      	bne.n	8005636 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	60bb      	str	r3, [r7, #8]
   return(result);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f023 0310 	bic.w	r3, r3, #16
 8005618:	647b      	str	r3, [r7, #68]	@ 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005626:	6979      	ldr	r1, [r7, #20]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	613b      	str	r3, [r7, #16]
   return(result);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e6      	bne.n	8005604 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800564a:	bf00      	nop
 800564c:	3754      	adds	r7, #84	@ 0x54
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <std>:
 8005658:	2300      	movs	r3, #0
 800565a:	b510      	push	{r4, lr}
 800565c:	4604      	mov	r4, r0
 800565e:	e9c0 3300 	strd	r3, r3, [r0]
 8005662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005666:	6083      	str	r3, [r0, #8]
 8005668:	8181      	strh	r1, [r0, #12]
 800566a:	6643      	str	r3, [r0, #100]	@ 0x64
 800566c:	81c2      	strh	r2, [r0, #14]
 800566e:	6183      	str	r3, [r0, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	2208      	movs	r2, #8
 8005674:	305c      	adds	r0, #92	@ 0x5c
 8005676:	f000 f9f9 	bl	8005a6c <memset>
 800567a:	4b0d      	ldr	r3, [pc, #52]	@ (80056b0 <std+0x58>)
 800567c:	6263      	str	r3, [r4, #36]	@ 0x24
 800567e:	4b0d      	ldr	r3, [pc, #52]	@ (80056b4 <std+0x5c>)
 8005680:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <std+0x60>)
 8005684:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <std+0x64>)
 8005688:	6323      	str	r3, [r4, #48]	@ 0x30
 800568a:	4b0d      	ldr	r3, [pc, #52]	@ (80056c0 <std+0x68>)
 800568c:	6224      	str	r4, [r4, #32]
 800568e:	429c      	cmp	r4, r3
 8005690:	d006      	beq.n	80056a0 <std+0x48>
 8005692:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005696:	4294      	cmp	r4, r2
 8005698:	d002      	beq.n	80056a0 <std+0x48>
 800569a:	33d0      	adds	r3, #208	@ 0xd0
 800569c:	429c      	cmp	r4, r3
 800569e:	d105      	bne.n	80056ac <std+0x54>
 80056a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	f000 ba58 	b.w	8005b5c <__retarget_lock_init_recursive>
 80056ac:	bd10      	pop	{r4, pc}
 80056ae:	bf00      	nop
 80056b0:	080058bd 	.word	0x080058bd
 80056b4:	080058df 	.word	0x080058df
 80056b8:	08005917 	.word	0x08005917
 80056bc:	0800593b 	.word	0x0800593b
 80056c0:	2000027c 	.word	0x2000027c

080056c4 <stdio_exit_handler>:
 80056c4:	4a02      	ldr	r2, [pc, #8]	@ (80056d0 <stdio_exit_handler+0xc>)
 80056c6:	4903      	ldr	r1, [pc, #12]	@ (80056d4 <stdio_exit_handler+0x10>)
 80056c8:	4803      	ldr	r0, [pc, #12]	@ (80056d8 <stdio_exit_handler+0x14>)
 80056ca:	f000 b869 	b.w	80057a0 <_fwalk_sglue>
 80056ce:	bf00      	nop
 80056d0:	2000000c 	.word	0x2000000c
 80056d4:	080063f9 	.word	0x080063f9
 80056d8:	2000001c 	.word	0x2000001c

080056dc <cleanup_stdio>:
 80056dc:	6841      	ldr	r1, [r0, #4]
 80056de:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <cleanup_stdio+0x34>)
 80056e0:	4299      	cmp	r1, r3
 80056e2:	b510      	push	{r4, lr}
 80056e4:	4604      	mov	r4, r0
 80056e6:	d001      	beq.n	80056ec <cleanup_stdio+0x10>
 80056e8:	f000 fe86 	bl	80063f8 <_fflush_r>
 80056ec:	68a1      	ldr	r1, [r4, #8]
 80056ee:	4b09      	ldr	r3, [pc, #36]	@ (8005714 <cleanup_stdio+0x38>)
 80056f0:	4299      	cmp	r1, r3
 80056f2:	d002      	beq.n	80056fa <cleanup_stdio+0x1e>
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 fe7f 	bl	80063f8 <_fflush_r>
 80056fa:	68e1      	ldr	r1, [r4, #12]
 80056fc:	4b06      	ldr	r3, [pc, #24]	@ (8005718 <cleanup_stdio+0x3c>)
 80056fe:	4299      	cmp	r1, r3
 8005700:	d004      	beq.n	800570c <cleanup_stdio+0x30>
 8005702:	4620      	mov	r0, r4
 8005704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005708:	f000 be76 	b.w	80063f8 <_fflush_r>
 800570c:	bd10      	pop	{r4, pc}
 800570e:	bf00      	nop
 8005710:	2000027c 	.word	0x2000027c
 8005714:	200002e4 	.word	0x200002e4
 8005718:	2000034c 	.word	0x2000034c

0800571c <global_stdio_init.part.0>:
 800571c:	b510      	push	{r4, lr}
 800571e:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <global_stdio_init.part.0+0x30>)
 8005720:	4c0b      	ldr	r4, [pc, #44]	@ (8005750 <global_stdio_init.part.0+0x34>)
 8005722:	4a0c      	ldr	r2, [pc, #48]	@ (8005754 <global_stdio_init.part.0+0x38>)
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	4620      	mov	r0, r4
 8005728:	2200      	movs	r2, #0
 800572a:	2104      	movs	r1, #4
 800572c:	f7ff ff94 	bl	8005658 <std>
 8005730:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005734:	2201      	movs	r2, #1
 8005736:	2109      	movs	r1, #9
 8005738:	f7ff ff8e 	bl	8005658 <std>
 800573c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005740:	2202      	movs	r2, #2
 8005742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005746:	2112      	movs	r1, #18
 8005748:	f7ff bf86 	b.w	8005658 <std>
 800574c:	200003b4 	.word	0x200003b4
 8005750:	2000027c 	.word	0x2000027c
 8005754:	080056c5 	.word	0x080056c5

08005758 <__sfp_lock_acquire>:
 8005758:	4801      	ldr	r0, [pc, #4]	@ (8005760 <__sfp_lock_acquire+0x8>)
 800575a:	f000 ba00 	b.w	8005b5e <__retarget_lock_acquire_recursive>
 800575e:	bf00      	nop
 8005760:	200003bd 	.word	0x200003bd

08005764 <__sfp_lock_release>:
 8005764:	4801      	ldr	r0, [pc, #4]	@ (800576c <__sfp_lock_release+0x8>)
 8005766:	f000 b9fb 	b.w	8005b60 <__retarget_lock_release_recursive>
 800576a:	bf00      	nop
 800576c:	200003bd 	.word	0x200003bd

08005770 <__sinit>:
 8005770:	b510      	push	{r4, lr}
 8005772:	4604      	mov	r4, r0
 8005774:	f7ff fff0 	bl	8005758 <__sfp_lock_acquire>
 8005778:	6a23      	ldr	r3, [r4, #32]
 800577a:	b11b      	cbz	r3, 8005784 <__sinit+0x14>
 800577c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005780:	f7ff bff0 	b.w	8005764 <__sfp_lock_release>
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <__sinit+0x28>)
 8005786:	6223      	str	r3, [r4, #32]
 8005788:	4b04      	ldr	r3, [pc, #16]	@ (800579c <__sinit+0x2c>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1f5      	bne.n	800577c <__sinit+0xc>
 8005790:	f7ff ffc4 	bl	800571c <global_stdio_init.part.0>
 8005794:	e7f2      	b.n	800577c <__sinit+0xc>
 8005796:	bf00      	nop
 8005798:	080056dd 	.word	0x080056dd
 800579c:	200003b4 	.word	0x200003b4

080057a0 <_fwalk_sglue>:
 80057a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057a4:	4607      	mov	r7, r0
 80057a6:	4688      	mov	r8, r1
 80057a8:	4614      	mov	r4, r2
 80057aa:	2600      	movs	r6, #0
 80057ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057b0:	f1b9 0901 	subs.w	r9, r9, #1
 80057b4:	d505      	bpl.n	80057c2 <_fwalk_sglue+0x22>
 80057b6:	6824      	ldr	r4, [r4, #0]
 80057b8:	2c00      	cmp	r4, #0
 80057ba:	d1f7      	bne.n	80057ac <_fwalk_sglue+0xc>
 80057bc:	4630      	mov	r0, r6
 80057be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057c2:	89ab      	ldrh	r3, [r5, #12]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d907      	bls.n	80057d8 <_fwalk_sglue+0x38>
 80057c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057cc:	3301      	adds	r3, #1
 80057ce:	d003      	beq.n	80057d8 <_fwalk_sglue+0x38>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4638      	mov	r0, r7
 80057d4:	47c0      	blx	r8
 80057d6:	4306      	orrs	r6, r0
 80057d8:	3568      	adds	r5, #104	@ 0x68
 80057da:	e7e9      	b.n	80057b0 <_fwalk_sglue+0x10>

080057dc <iprintf>:
 80057dc:	b40f      	push	{r0, r1, r2, r3}
 80057de:	b507      	push	{r0, r1, r2, lr}
 80057e0:	4906      	ldr	r1, [pc, #24]	@ (80057fc <iprintf+0x20>)
 80057e2:	ab04      	add	r3, sp, #16
 80057e4:	6808      	ldr	r0, [r1, #0]
 80057e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ea:	6881      	ldr	r1, [r0, #8]
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	f000 fadb 	bl	8005da8 <_vfiprintf_r>
 80057f2:	b003      	add	sp, #12
 80057f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f8:	b004      	add	sp, #16
 80057fa:	4770      	bx	lr
 80057fc:	20000018 	.word	0x20000018

08005800 <_puts_r>:
 8005800:	6a03      	ldr	r3, [r0, #32]
 8005802:	b570      	push	{r4, r5, r6, lr}
 8005804:	6884      	ldr	r4, [r0, #8]
 8005806:	4605      	mov	r5, r0
 8005808:	460e      	mov	r6, r1
 800580a:	b90b      	cbnz	r3, 8005810 <_puts_r+0x10>
 800580c:	f7ff ffb0 	bl	8005770 <__sinit>
 8005810:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005812:	07db      	lsls	r3, r3, #31
 8005814:	d405      	bmi.n	8005822 <_puts_r+0x22>
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	0598      	lsls	r0, r3, #22
 800581a:	d402      	bmi.n	8005822 <_puts_r+0x22>
 800581c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800581e:	f000 f99e 	bl	8005b5e <__retarget_lock_acquire_recursive>
 8005822:	89a3      	ldrh	r3, [r4, #12]
 8005824:	0719      	lsls	r1, r3, #28
 8005826:	d502      	bpl.n	800582e <_puts_r+0x2e>
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d135      	bne.n	800589a <_puts_r+0x9a>
 800582e:	4621      	mov	r1, r4
 8005830:	4628      	mov	r0, r5
 8005832:	f000 f8c5 	bl	80059c0 <__swsetup_r>
 8005836:	b380      	cbz	r0, 800589a <_puts_r+0x9a>
 8005838:	f04f 35ff 	mov.w	r5, #4294967295
 800583c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800583e:	07da      	lsls	r2, r3, #31
 8005840:	d405      	bmi.n	800584e <_puts_r+0x4e>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	059b      	lsls	r3, r3, #22
 8005846:	d402      	bmi.n	800584e <_puts_r+0x4e>
 8005848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800584a:	f000 f989 	bl	8005b60 <__retarget_lock_release_recursive>
 800584e:	4628      	mov	r0, r5
 8005850:	bd70      	pop	{r4, r5, r6, pc}
 8005852:	2b00      	cmp	r3, #0
 8005854:	da04      	bge.n	8005860 <_puts_r+0x60>
 8005856:	69a2      	ldr	r2, [r4, #24]
 8005858:	429a      	cmp	r2, r3
 800585a:	dc17      	bgt.n	800588c <_puts_r+0x8c>
 800585c:	290a      	cmp	r1, #10
 800585e:	d015      	beq.n	800588c <_puts_r+0x8c>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	1c5a      	adds	r2, r3, #1
 8005864:	6022      	str	r2, [r4, #0]
 8005866:	7019      	strb	r1, [r3, #0]
 8005868:	68a3      	ldr	r3, [r4, #8]
 800586a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800586e:	3b01      	subs	r3, #1
 8005870:	60a3      	str	r3, [r4, #8]
 8005872:	2900      	cmp	r1, #0
 8005874:	d1ed      	bne.n	8005852 <_puts_r+0x52>
 8005876:	2b00      	cmp	r3, #0
 8005878:	da11      	bge.n	800589e <_puts_r+0x9e>
 800587a:	4622      	mov	r2, r4
 800587c:	210a      	movs	r1, #10
 800587e:	4628      	mov	r0, r5
 8005880:	f000 f85f 	bl	8005942 <__swbuf_r>
 8005884:	3001      	adds	r0, #1
 8005886:	d0d7      	beq.n	8005838 <_puts_r+0x38>
 8005888:	250a      	movs	r5, #10
 800588a:	e7d7      	b.n	800583c <_puts_r+0x3c>
 800588c:	4622      	mov	r2, r4
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f857 	bl	8005942 <__swbuf_r>
 8005894:	3001      	adds	r0, #1
 8005896:	d1e7      	bne.n	8005868 <_puts_r+0x68>
 8005898:	e7ce      	b.n	8005838 <_puts_r+0x38>
 800589a:	3e01      	subs	r6, #1
 800589c:	e7e4      	b.n	8005868 <_puts_r+0x68>
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	6022      	str	r2, [r4, #0]
 80058a4:	220a      	movs	r2, #10
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e7ee      	b.n	8005888 <_puts_r+0x88>
	...

080058ac <puts>:
 80058ac:	4b02      	ldr	r3, [pc, #8]	@ (80058b8 <puts+0xc>)
 80058ae:	4601      	mov	r1, r0
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	f7ff bfa5 	b.w	8005800 <_puts_r>
 80058b6:	bf00      	nop
 80058b8:	20000018 	.word	0x20000018

080058bc <__sread>:
 80058bc:	b510      	push	{r4, lr}
 80058be:	460c      	mov	r4, r1
 80058c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c4:	f000 f8fc 	bl	8005ac0 <_read_r>
 80058c8:	2800      	cmp	r0, #0
 80058ca:	bfab      	itete	ge
 80058cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058ce:	89a3      	ldrhlt	r3, [r4, #12]
 80058d0:	181b      	addge	r3, r3, r0
 80058d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058d6:	bfac      	ite	ge
 80058d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058da:	81a3      	strhlt	r3, [r4, #12]
 80058dc:	bd10      	pop	{r4, pc}

080058de <__swrite>:
 80058de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e2:	461f      	mov	r7, r3
 80058e4:	898b      	ldrh	r3, [r1, #12]
 80058e6:	05db      	lsls	r3, r3, #23
 80058e8:	4605      	mov	r5, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	4616      	mov	r6, r2
 80058ee:	d505      	bpl.n	80058fc <__swrite+0x1e>
 80058f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f4:	2302      	movs	r3, #2
 80058f6:	2200      	movs	r2, #0
 80058f8:	f000 f8d0 	bl	8005a9c <_lseek_r>
 80058fc:	89a3      	ldrh	r3, [r4, #12]
 80058fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005902:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005906:	81a3      	strh	r3, [r4, #12]
 8005908:	4632      	mov	r2, r6
 800590a:	463b      	mov	r3, r7
 800590c:	4628      	mov	r0, r5
 800590e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005912:	f000 b8e7 	b.w	8005ae4 <_write_r>

08005916 <__sseek>:
 8005916:	b510      	push	{r4, lr}
 8005918:	460c      	mov	r4, r1
 800591a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591e:	f000 f8bd 	bl	8005a9c <_lseek_r>
 8005922:	1c43      	adds	r3, r0, #1
 8005924:	89a3      	ldrh	r3, [r4, #12]
 8005926:	bf15      	itete	ne
 8005928:	6560      	strne	r0, [r4, #84]	@ 0x54
 800592a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800592e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005932:	81a3      	strheq	r3, [r4, #12]
 8005934:	bf18      	it	ne
 8005936:	81a3      	strhne	r3, [r4, #12]
 8005938:	bd10      	pop	{r4, pc}

0800593a <__sclose>:
 800593a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800593e:	f000 b89d 	b.w	8005a7c <_close_r>

08005942 <__swbuf_r>:
 8005942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005944:	460e      	mov	r6, r1
 8005946:	4614      	mov	r4, r2
 8005948:	4605      	mov	r5, r0
 800594a:	b118      	cbz	r0, 8005954 <__swbuf_r+0x12>
 800594c:	6a03      	ldr	r3, [r0, #32]
 800594e:	b90b      	cbnz	r3, 8005954 <__swbuf_r+0x12>
 8005950:	f7ff ff0e 	bl	8005770 <__sinit>
 8005954:	69a3      	ldr	r3, [r4, #24]
 8005956:	60a3      	str	r3, [r4, #8]
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	071a      	lsls	r2, r3, #28
 800595c:	d501      	bpl.n	8005962 <__swbuf_r+0x20>
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	b943      	cbnz	r3, 8005974 <__swbuf_r+0x32>
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f82b 	bl	80059c0 <__swsetup_r>
 800596a:	b118      	cbz	r0, 8005974 <__swbuf_r+0x32>
 800596c:	f04f 37ff 	mov.w	r7, #4294967295
 8005970:	4638      	mov	r0, r7
 8005972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	6922      	ldr	r2, [r4, #16]
 8005978:	1a98      	subs	r0, r3, r2
 800597a:	6963      	ldr	r3, [r4, #20]
 800597c:	b2f6      	uxtb	r6, r6
 800597e:	4283      	cmp	r3, r0
 8005980:	4637      	mov	r7, r6
 8005982:	dc05      	bgt.n	8005990 <__swbuf_r+0x4e>
 8005984:	4621      	mov	r1, r4
 8005986:	4628      	mov	r0, r5
 8005988:	f000 fd36 	bl	80063f8 <_fflush_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	d1ed      	bne.n	800596c <__swbuf_r+0x2a>
 8005990:	68a3      	ldr	r3, [r4, #8]
 8005992:	3b01      	subs	r3, #1
 8005994:	60a3      	str	r3, [r4, #8]
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	701e      	strb	r6, [r3, #0]
 800599e:	6962      	ldr	r2, [r4, #20]
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d004      	beq.n	80059b0 <__swbuf_r+0x6e>
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	07db      	lsls	r3, r3, #31
 80059aa:	d5e1      	bpl.n	8005970 <__swbuf_r+0x2e>
 80059ac:	2e0a      	cmp	r6, #10
 80059ae:	d1df      	bne.n	8005970 <__swbuf_r+0x2e>
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	f000 fd20 	bl	80063f8 <_fflush_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d0d9      	beq.n	8005970 <__swbuf_r+0x2e>
 80059bc:	e7d6      	b.n	800596c <__swbuf_r+0x2a>
	...

080059c0 <__swsetup_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4b29      	ldr	r3, [pc, #164]	@ (8005a68 <__swsetup_r+0xa8>)
 80059c4:	4605      	mov	r5, r0
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	460c      	mov	r4, r1
 80059ca:	b118      	cbz	r0, 80059d4 <__swsetup_r+0x14>
 80059cc:	6a03      	ldr	r3, [r0, #32]
 80059ce:	b90b      	cbnz	r3, 80059d4 <__swsetup_r+0x14>
 80059d0:	f7ff fece 	bl	8005770 <__sinit>
 80059d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d8:	0719      	lsls	r1, r3, #28
 80059da:	d422      	bmi.n	8005a22 <__swsetup_r+0x62>
 80059dc:	06da      	lsls	r2, r3, #27
 80059de:	d407      	bmi.n	80059f0 <__swsetup_r+0x30>
 80059e0:	2209      	movs	r2, #9
 80059e2:	602a      	str	r2, [r5, #0]
 80059e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	e033      	b.n	8005a58 <__swsetup_r+0x98>
 80059f0:	0758      	lsls	r0, r3, #29
 80059f2:	d512      	bpl.n	8005a1a <__swsetup_r+0x5a>
 80059f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059f6:	b141      	cbz	r1, 8005a0a <__swsetup_r+0x4a>
 80059f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059fc:	4299      	cmp	r1, r3
 80059fe:	d002      	beq.n	8005a06 <__swsetup_r+0x46>
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f8af 	bl	8005b64 <_free_r>
 8005a06:	2300      	movs	r3, #0
 8005a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	2300      	movs	r3, #0
 8005a14:	6063      	str	r3, [r4, #4]
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	f043 0308 	orr.w	r3, r3, #8
 8005a20:	81a3      	strh	r3, [r4, #12]
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	b94b      	cbnz	r3, 8005a3a <__swsetup_r+0x7a>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a30:	d003      	beq.n	8005a3a <__swsetup_r+0x7a>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 fd2d 	bl	8006494 <__smakebuf_r>
 8005a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a3e:	f013 0201 	ands.w	r2, r3, #1
 8005a42:	d00a      	beq.n	8005a5a <__swsetup_r+0x9a>
 8005a44:	2200      	movs	r2, #0
 8005a46:	60a2      	str	r2, [r4, #8]
 8005a48:	6962      	ldr	r2, [r4, #20]
 8005a4a:	4252      	negs	r2, r2
 8005a4c:	61a2      	str	r2, [r4, #24]
 8005a4e:	6922      	ldr	r2, [r4, #16]
 8005a50:	b942      	cbnz	r2, 8005a64 <__swsetup_r+0xa4>
 8005a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a56:	d1c5      	bne.n	80059e4 <__swsetup_r+0x24>
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	0799      	lsls	r1, r3, #30
 8005a5c:	bf58      	it	pl
 8005a5e:	6962      	ldrpl	r2, [r4, #20]
 8005a60:	60a2      	str	r2, [r4, #8]
 8005a62:	e7f4      	b.n	8005a4e <__swsetup_r+0x8e>
 8005a64:	2000      	movs	r0, #0
 8005a66:	e7f7      	b.n	8005a58 <__swsetup_r+0x98>
 8005a68:	20000018 	.word	0x20000018

08005a6c <memset>:
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d100      	bne.n	8005a76 <memset+0xa>
 8005a74:	4770      	bx	lr
 8005a76:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7a:	e7f9      	b.n	8005a70 <memset+0x4>

08005a7c <_close_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d06      	ldr	r5, [pc, #24]	@ (8005a98 <_close_r+0x1c>)
 8005a80:	2300      	movs	r3, #0
 8005a82:	4604      	mov	r4, r0
 8005a84:	4608      	mov	r0, r1
 8005a86:	602b      	str	r3, [r5, #0]
 8005a88:	f7fb faf7 	bl	800107a <_close>
 8005a8c:	1c43      	adds	r3, r0, #1
 8005a8e:	d102      	bne.n	8005a96 <_close_r+0x1a>
 8005a90:	682b      	ldr	r3, [r5, #0]
 8005a92:	b103      	cbz	r3, 8005a96 <_close_r+0x1a>
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	200003b8 	.word	0x200003b8

08005a9c <_lseek_r>:
 8005a9c:	b538      	push	{r3, r4, r5, lr}
 8005a9e:	4d07      	ldr	r5, [pc, #28]	@ (8005abc <_lseek_r+0x20>)
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	4608      	mov	r0, r1
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	602a      	str	r2, [r5, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f7fb fb0c 	bl	80010c8 <_lseek>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d102      	bne.n	8005aba <_lseek_r+0x1e>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	b103      	cbz	r3, 8005aba <_lseek_r+0x1e>
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	200003b8 	.word	0x200003b8

08005ac0 <_read_r>:
 8005ac0:	b538      	push	{r3, r4, r5, lr}
 8005ac2:	4d07      	ldr	r5, [pc, #28]	@ (8005ae0 <_read_r+0x20>)
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	4608      	mov	r0, r1
 8005ac8:	4611      	mov	r1, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	602a      	str	r2, [r5, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f7fb fab6 	bl	8001040 <_read>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_read_r+0x1e>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_read_r+0x1e>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	200003b8 	.word	0x200003b8

08005ae4 <_write_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	@ (8005b04 <_write_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fa fc38 	bl	8000368 <_write>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_write_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_write_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200003b8 	.word	0x200003b8

08005b08 <__errno>:
 8005b08:	4b01      	ldr	r3, [pc, #4]	@ (8005b10 <__errno+0x8>)
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000018 	.word	0x20000018

08005b14 <__libc_init_array>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	4d0d      	ldr	r5, [pc, #52]	@ (8005b4c <__libc_init_array+0x38>)
 8005b18:	4c0d      	ldr	r4, [pc, #52]	@ (8005b50 <__libc_init_array+0x3c>)
 8005b1a:	1b64      	subs	r4, r4, r5
 8005b1c:	10a4      	asrs	r4, r4, #2
 8005b1e:	2600      	movs	r6, #0
 8005b20:	42a6      	cmp	r6, r4
 8005b22:	d109      	bne.n	8005b38 <__libc_init_array+0x24>
 8005b24:	4d0b      	ldr	r5, [pc, #44]	@ (8005b54 <__libc_init_array+0x40>)
 8005b26:	4c0c      	ldr	r4, [pc, #48]	@ (8005b58 <__libc_init_array+0x44>)
 8005b28:	f000 fd22 	bl	8006570 <_init>
 8005b2c:	1b64      	subs	r4, r4, r5
 8005b2e:	10a4      	asrs	r4, r4, #2
 8005b30:	2600      	movs	r6, #0
 8005b32:	42a6      	cmp	r6, r4
 8005b34:	d105      	bne.n	8005b42 <__libc_init_array+0x2e>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3c:	4798      	blx	r3
 8005b3e:	3601      	adds	r6, #1
 8005b40:	e7ee      	b.n	8005b20 <__libc_init_array+0xc>
 8005b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b46:	4798      	blx	r3
 8005b48:	3601      	adds	r6, #1
 8005b4a:	e7f2      	b.n	8005b32 <__libc_init_array+0x1e>
 8005b4c:	08006610 	.word	0x08006610
 8005b50:	08006610 	.word	0x08006610
 8005b54:	08006610 	.word	0x08006610
 8005b58:	08006614 	.word	0x08006614

08005b5c <__retarget_lock_init_recursive>:
 8005b5c:	4770      	bx	lr

08005b5e <__retarget_lock_acquire_recursive>:
 8005b5e:	4770      	bx	lr

08005b60 <__retarget_lock_release_recursive>:
 8005b60:	4770      	bx	lr
	...

08005b64 <_free_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4605      	mov	r5, r0
 8005b68:	2900      	cmp	r1, #0
 8005b6a:	d041      	beq.n	8005bf0 <_free_r+0x8c>
 8005b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b70:	1f0c      	subs	r4, r1, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bfb8      	it	lt
 8005b76:	18e4      	addlt	r4, r4, r3
 8005b78:	f000 f8e0 	bl	8005d3c <__malloc_lock>
 8005b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005bf4 <_free_r+0x90>)
 8005b7e:	6813      	ldr	r3, [r2, #0]
 8005b80:	b933      	cbnz	r3, 8005b90 <_free_r+0x2c>
 8005b82:	6063      	str	r3, [r4, #4]
 8005b84:	6014      	str	r4, [r2, #0]
 8005b86:	4628      	mov	r0, r5
 8005b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b8c:	f000 b8dc 	b.w	8005d48 <__malloc_unlock>
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	d908      	bls.n	8005ba6 <_free_r+0x42>
 8005b94:	6820      	ldr	r0, [r4, #0]
 8005b96:	1821      	adds	r1, r4, r0
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf01      	itttt	eq
 8005b9c:	6819      	ldreq	r1, [r3, #0]
 8005b9e:	685b      	ldreq	r3, [r3, #4]
 8005ba0:	1809      	addeq	r1, r1, r0
 8005ba2:	6021      	streq	r1, [r4, #0]
 8005ba4:	e7ed      	b.n	8005b82 <_free_r+0x1e>
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b10b      	cbz	r3, 8005bb0 <_free_r+0x4c>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d9fa      	bls.n	8005ba6 <_free_r+0x42>
 8005bb0:	6811      	ldr	r1, [r2, #0]
 8005bb2:	1850      	adds	r0, r2, r1
 8005bb4:	42a0      	cmp	r0, r4
 8005bb6:	d10b      	bne.n	8005bd0 <_free_r+0x6c>
 8005bb8:	6820      	ldr	r0, [r4, #0]
 8005bba:	4401      	add	r1, r0
 8005bbc:	1850      	adds	r0, r2, r1
 8005bbe:	4283      	cmp	r3, r0
 8005bc0:	6011      	str	r1, [r2, #0]
 8005bc2:	d1e0      	bne.n	8005b86 <_free_r+0x22>
 8005bc4:	6818      	ldr	r0, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	6053      	str	r3, [r2, #4]
 8005bca:	4408      	add	r0, r1
 8005bcc:	6010      	str	r0, [r2, #0]
 8005bce:	e7da      	b.n	8005b86 <_free_r+0x22>
 8005bd0:	d902      	bls.n	8005bd8 <_free_r+0x74>
 8005bd2:	230c      	movs	r3, #12
 8005bd4:	602b      	str	r3, [r5, #0]
 8005bd6:	e7d6      	b.n	8005b86 <_free_r+0x22>
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	1821      	adds	r1, r4, r0
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	bf04      	itt	eq
 8005be0:	6819      	ldreq	r1, [r3, #0]
 8005be2:	685b      	ldreq	r3, [r3, #4]
 8005be4:	6063      	str	r3, [r4, #4]
 8005be6:	bf04      	itt	eq
 8005be8:	1809      	addeq	r1, r1, r0
 8005bea:	6021      	streq	r1, [r4, #0]
 8005bec:	6054      	str	r4, [r2, #4]
 8005bee:	e7ca      	b.n	8005b86 <_free_r+0x22>
 8005bf0:	bd38      	pop	{r3, r4, r5, pc}
 8005bf2:	bf00      	nop
 8005bf4:	200003c4 	.word	0x200003c4

08005bf8 <sbrk_aligned>:
 8005bf8:	b570      	push	{r4, r5, r6, lr}
 8005bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8005c38 <sbrk_aligned+0x40>)
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	6831      	ldr	r1, [r6, #0]
 8005c00:	4605      	mov	r5, r0
 8005c02:	b911      	cbnz	r1, 8005c0a <sbrk_aligned+0x12>
 8005c04:	f000 fca4 	bl	8006550 <_sbrk_r>
 8005c08:	6030      	str	r0, [r6, #0]
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	f000 fc9f 	bl	8006550 <_sbrk_r>
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	d103      	bne.n	8005c1e <sbrk_aligned+0x26>
 8005c16:	f04f 34ff 	mov.w	r4, #4294967295
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	bd70      	pop	{r4, r5, r6, pc}
 8005c1e:	1cc4      	adds	r4, r0, #3
 8005c20:	f024 0403 	bic.w	r4, r4, #3
 8005c24:	42a0      	cmp	r0, r4
 8005c26:	d0f8      	beq.n	8005c1a <sbrk_aligned+0x22>
 8005c28:	1a21      	subs	r1, r4, r0
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f000 fc90 	bl	8006550 <_sbrk_r>
 8005c30:	3001      	adds	r0, #1
 8005c32:	d1f2      	bne.n	8005c1a <sbrk_aligned+0x22>
 8005c34:	e7ef      	b.n	8005c16 <sbrk_aligned+0x1e>
 8005c36:	bf00      	nop
 8005c38:	200003c0 	.word	0x200003c0

08005c3c <_malloc_r>:
 8005c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c40:	1ccd      	adds	r5, r1, #3
 8005c42:	f025 0503 	bic.w	r5, r5, #3
 8005c46:	3508      	adds	r5, #8
 8005c48:	2d0c      	cmp	r5, #12
 8005c4a:	bf38      	it	cc
 8005c4c:	250c      	movcc	r5, #12
 8005c4e:	2d00      	cmp	r5, #0
 8005c50:	4606      	mov	r6, r0
 8005c52:	db01      	blt.n	8005c58 <_malloc_r+0x1c>
 8005c54:	42a9      	cmp	r1, r5
 8005c56:	d904      	bls.n	8005c62 <_malloc_r+0x26>
 8005c58:	230c      	movs	r3, #12
 8005c5a:	6033      	str	r3, [r6, #0]
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d38 <_malloc_r+0xfc>
 8005c66:	f000 f869 	bl	8005d3c <__malloc_lock>
 8005c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6e:	461c      	mov	r4, r3
 8005c70:	bb44      	cbnz	r4, 8005cc4 <_malloc_r+0x88>
 8005c72:	4629      	mov	r1, r5
 8005c74:	4630      	mov	r0, r6
 8005c76:	f7ff ffbf 	bl	8005bf8 <sbrk_aligned>
 8005c7a:	1c43      	adds	r3, r0, #1
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	d158      	bne.n	8005d32 <_malloc_r+0xf6>
 8005c80:	f8d8 4000 	ldr.w	r4, [r8]
 8005c84:	4627      	mov	r7, r4
 8005c86:	2f00      	cmp	r7, #0
 8005c88:	d143      	bne.n	8005d12 <_malloc_r+0xd6>
 8005c8a:	2c00      	cmp	r4, #0
 8005c8c:	d04b      	beq.n	8005d26 <_malloc_r+0xea>
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	4639      	mov	r1, r7
 8005c92:	4630      	mov	r0, r6
 8005c94:	eb04 0903 	add.w	r9, r4, r3
 8005c98:	f000 fc5a 	bl	8006550 <_sbrk_r>
 8005c9c:	4581      	cmp	r9, r0
 8005c9e:	d142      	bne.n	8005d26 <_malloc_r+0xea>
 8005ca0:	6821      	ldr	r1, [r4, #0]
 8005ca2:	1a6d      	subs	r5, r5, r1
 8005ca4:	4629      	mov	r1, r5
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f7ff ffa6 	bl	8005bf8 <sbrk_aligned>
 8005cac:	3001      	adds	r0, #1
 8005cae:	d03a      	beq.n	8005d26 <_malloc_r+0xea>
 8005cb0:	6823      	ldr	r3, [r4, #0]
 8005cb2:	442b      	add	r3, r5
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	bb62      	cbnz	r2, 8005d18 <_malloc_r+0xdc>
 8005cbe:	f8c8 7000 	str.w	r7, [r8]
 8005cc2:	e00f      	b.n	8005ce4 <_malloc_r+0xa8>
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	1b52      	subs	r2, r2, r5
 8005cc8:	d420      	bmi.n	8005d0c <_malloc_r+0xd0>
 8005cca:	2a0b      	cmp	r2, #11
 8005ccc:	d917      	bls.n	8005cfe <_malloc_r+0xc2>
 8005cce:	1961      	adds	r1, r4, r5
 8005cd0:	42a3      	cmp	r3, r4
 8005cd2:	6025      	str	r5, [r4, #0]
 8005cd4:	bf18      	it	ne
 8005cd6:	6059      	strne	r1, [r3, #4]
 8005cd8:	6863      	ldr	r3, [r4, #4]
 8005cda:	bf08      	it	eq
 8005cdc:	f8c8 1000 	streq.w	r1, [r8]
 8005ce0:	5162      	str	r2, [r4, r5]
 8005ce2:	604b      	str	r3, [r1, #4]
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	f000 f82f 	bl	8005d48 <__malloc_unlock>
 8005cea:	f104 000b 	add.w	r0, r4, #11
 8005cee:	1d23      	adds	r3, r4, #4
 8005cf0:	f020 0007 	bic.w	r0, r0, #7
 8005cf4:	1ac2      	subs	r2, r0, r3
 8005cf6:	bf1c      	itt	ne
 8005cf8:	1a1b      	subne	r3, r3, r0
 8005cfa:	50a3      	strne	r3, [r4, r2]
 8005cfc:	e7af      	b.n	8005c5e <_malloc_r+0x22>
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	bf0c      	ite	eq
 8005d04:	f8c8 2000 	streq.w	r2, [r8]
 8005d08:	605a      	strne	r2, [r3, #4]
 8005d0a:	e7eb      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d0c:	4623      	mov	r3, r4
 8005d0e:	6864      	ldr	r4, [r4, #4]
 8005d10:	e7ae      	b.n	8005c70 <_malloc_r+0x34>
 8005d12:	463c      	mov	r4, r7
 8005d14:	687f      	ldr	r7, [r7, #4]
 8005d16:	e7b6      	b.n	8005c86 <_malloc_r+0x4a>
 8005d18:	461a      	mov	r2, r3
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	42a3      	cmp	r3, r4
 8005d1e:	d1fb      	bne.n	8005d18 <_malloc_r+0xdc>
 8005d20:	2300      	movs	r3, #0
 8005d22:	6053      	str	r3, [r2, #4]
 8005d24:	e7de      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d26:	230c      	movs	r3, #12
 8005d28:	6033      	str	r3, [r6, #0]
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f000 f80c 	bl	8005d48 <__malloc_unlock>
 8005d30:	e794      	b.n	8005c5c <_malloc_r+0x20>
 8005d32:	6005      	str	r5, [r0, #0]
 8005d34:	e7d6      	b.n	8005ce4 <_malloc_r+0xa8>
 8005d36:	bf00      	nop
 8005d38:	200003c4 	.word	0x200003c4

08005d3c <__malloc_lock>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	@ (8005d44 <__malloc_lock+0x8>)
 8005d3e:	f7ff bf0e 	b.w	8005b5e <__retarget_lock_acquire_recursive>
 8005d42:	bf00      	nop
 8005d44:	200003bc 	.word	0x200003bc

08005d48 <__malloc_unlock>:
 8005d48:	4801      	ldr	r0, [pc, #4]	@ (8005d50 <__malloc_unlock+0x8>)
 8005d4a:	f7ff bf09 	b.w	8005b60 <__retarget_lock_release_recursive>
 8005d4e:	bf00      	nop
 8005d50:	200003bc 	.word	0x200003bc

08005d54 <__sfputc_r>:
 8005d54:	6893      	ldr	r3, [r2, #8]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	b410      	push	{r4}
 8005d5c:	6093      	str	r3, [r2, #8]
 8005d5e:	da08      	bge.n	8005d72 <__sfputc_r+0x1e>
 8005d60:	6994      	ldr	r4, [r2, #24]
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	db01      	blt.n	8005d6a <__sfputc_r+0x16>
 8005d66:	290a      	cmp	r1, #10
 8005d68:	d103      	bne.n	8005d72 <__sfputc_r+0x1e>
 8005d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d6e:	f7ff bde8 	b.w	8005942 <__swbuf_r>
 8005d72:	6813      	ldr	r3, [r2, #0]
 8005d74:	1c58      	adds	r0, r3, #1
 8005d76:	6010      	str	r0, [r2, #0]
 8005d78:	7019      	strb	r1, [r3, #0]
 8005d7a:	4608      	mov	r0, r1
 8005d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <__sfputs_r>:
 8005d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	4614      	mov	r4, r2
 8005d8a:	18d5      	adds	r5, r2, r3
 8005d8c:	42ac      	cmp	r4, r5
 8005d8e:	d101      	bne.n	8005d94 <__sfputs_r+0x12>
 8005d90:	2000      	movs	r0, #0
 8005d92:	e007      	b.n	8005da4 <__sfputs_r+0x22>
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	463a      	mov	r2, r7
 8005d9a:	4630      	mov	r0, r6
 8005d9c:	f7ff ffda 	bl	8005d54 <__sfputc_r>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d1f3      	bne.n	8005d8c <__sfputs_r+0xa>
 8005da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005da8 <_vfiprintf_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	460d      	mov	r5, r1
 8005dae:	b09d      	sub	sp, #116	@ 0x74
 8005db0:	4614      	mov	r4, r2
 8005db2:	4698      	mov	r8, r3
 8005db4:	4606      	mov	r6, r0
 8005db6:	b118      	cbz	r0, 8005dc0 <_vfiprintf_r+0x18>
 8005db8:	6a03      	ldr	r3, [r0, #32]
 8005dba:	b90b      	cbnz	r3, 8005dc0 <_vfiprintf_r+0x18>
 8005dbc:	f7ff fcd8 	bl	8005770 <__sinit>
 8005dc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dc2:	07d9      	lsls	r1, r3, #31
 8005dc4:	d405      	bmi.n	8005dd2 <_vfiprintf_r+0x2a>
 8005dc6:	89ab      	ldrh	r3, [r5, #12]
 8005dc8:	059a      	lsls	r2, r3, #22
 8005dca:	d402      	bmi.n	8005dd2 <_vfiprintf_r+0x2a>
 8005dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dce:	f7ff fec6 	bl	8005b5e <__retarget_lock_acquire_recursive>
 8005dd2:	89ab      	ldrh	r3, [r5, #12]
 8005dd4:	071b      	lsls	r3, r3, #28
 8005dd6:	d501      	bpl.n	8005ddc <_vfiprintf_r+0x34>
 8005dd8:	692b      	ldr	r3, [r5, #16]
 8005dda:	b99b      	cbnz	r3, 8005e04 <_vfiprintf_r+0x5c>
 8005ddc:	4629      	mov	r1, r5
 8005dde:	4630      	mov	r0, r6
 8005de0:	f7ff fdee 	bl	80059c0 <__swsetup_r>
 8005de4:	b170      	cbz	r0, 8005e04 <_vfiprintf_r+0x5c>
 8005de6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005de8:	07dc      	lsls	r4, r3, #31
 8005dea:	d504      	bpl.n	8005df6 <_vfiprintf_r+0x4e>
 8005dec:	f04f 30ff 	mov.w	r0, #4294967295
 8005df0:	b01d      	add	sp, #116	@ 0x74
 8005df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df6:	89ab      	ldrh	r3, [r5, #12]
 8005df8:	0598      	lsls	r0, r3, #22
 8005dfa:	d4f7      	bmi.n	8005dec <_vfiprintf_r+0x44>
 8005dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dfe:	f7ff feaf 	bl	8005b60 <__retarget_lock_release_recursive>
 8005e02:	e7f3      	b.n	8005dec <_vfiprintf_r+0x44>
 8005e04:	2300      	movs	r3, #0
 8005e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e08:	2320      	movs	r3, #32
 8005e0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e12:	2330      	movs	r3, #48	@ 0x30
 8005e14:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005fc4 <_vfiprintf_r+0x21c>
 8005e18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e1c:	f04f 0901 	mov.w	r9, #1
 8005e20:	4623      	mov	r3, r4
 8005e22:	469a      	mov	sl, r3
 8005e24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e28:	b10a      	cbz	r2, 8005e2e <_vfiprintf_r+0x86>
 8005e2a:	2a25      	cmp	r2, #37	@ 0x25
 8005e2c:	d1f9      	bne.n	8005e22 <_vfiprintf_r+0x7a>
 8005e2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005e32:	d00b      	beq.n	8005e4c <_vfiprintf_r+0xa4>
 8005e34:	465b      	mov	r3, fp
 8005e36:	4622      	mov	r2, r4
 8005e38:	4629      	mov	r1, r5
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ffa1 	bl	8005d82 <__sfputs_r>
 8005e40:	3001      	adds	r0, #1
 8005e42:	f000 80a7 	beq.w	8005f94 <_vfiprintf_r+0x1ec>
 8005e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e48:	445a      	add	r2, fp
 8005e4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 809f 	beq.w	8005f94 <_vfiprintf_r+0x1ec>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e60:	f10a 0a01 	add.w	sl, sl, #1
 8005e64:	9304      	str	r3, [sp, #16]
 8005e66:	9307      	str	r3, [sp, #28]
 8005e68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e6e:	4654      	mov	r4, sl
 8005e70:	2205      	movs	r2, #5
 8005e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e76:	4853      	ldr	r0, [pc, #332]	@ (8005fc4 <_vfiprintf_r+0x21c>)
 8005e78:	f7fa f9aa 	bl	80001d0 <memchr>
 8005e7c:	9a04      	ldr	r2, [sp, #16]
 8005e7e:	b9d8      	cbnz	r0, 8005eb8 <_vfiprintf_r+0x110>
 8005e80:	06d1      	lsls	r1, r2, #27
 8005e82:	bf44      	itt	mi
 8005e84:	2320      	movmi	r3, #32
 8005e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e8a:	0713      	lsls	r3, r2, #28
 8005e8c:	bf44      	itt	mi
 8005e8e:	232b      	movmi	r3, #43	@ 0x2b
 8005e90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e94:	f89a 3000 	ldrb.w	r3, [sl]
 8005e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e9a:	d015      	beq.n	8005ec8 <_vfiprintf_r+0x120>
 8005e9c:	9a07      	ldr	r2, [sp, #28]
 8005e9e:	4654      	mov	r4, sl
 8005ea0:	2000      	movs	r0, #0
 8005ea2:	f04f 0c0a 	mov.w	ip, #10
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005eac:	3b30      	subs	r3, #48	@ 0x30
 8005eae:	2b09      	cmp	r3, #9
 8005eb0:	d94b      	bls.n	8005f4a <_vfiprintf_r+0x1a2>
 8005eb2:	b1b0      	cbz	r0, 8005ee2 <_vfiprintf_r+0x13a>
 8005eb4:	9207      	str	r2, [sp, #28]
 8005eb6:	e014      	b.n	8005ee2 <_vfiprintf_r+0x13a>
 8005eb8:	eba0 0308 	sub.w	r3, r0, r8
 8005ebc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	9304      	str	r3, [sp, #16]
 8005ec4:	46a2      	mov	sl, r4
 8005ec6:	e7d2      	b.n	8005e6e <_vfiprintf_r+0xc6>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	1d19      	adds	r1, r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	9103      	str	r1, [sp, #12]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	bfbb      	ittet	lt
 8005ed4:	425b      	neglt	r3, r3
 8005ed6:	f042 0202 	orrlt.w	r2, r2, #2
 8005eda:	9307      	strge	r3, [sp, #28]
 8005edc:	9307      	strlt	r3, [sp, #28]
 8005ede:	bfb8      	it	lt
 8005ee0:	9204      	strlt	r2, [sp, #16]
 8005ee2:	7823      	ldrb	r3, [r4, #0]
 8005ee4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ee6:	d10a      	bne.n	8005efe <_vfiprintf_r+0x156>
 8005ee8:	7863      	ldrb	r3, [r4, #1]
 8005eea:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eec:	d132      	bne.n	8005f54 <_vfiprintf_r+0x1ac>
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	1d1a      	adds	r2, r3, #4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	9203      	str	r2, [sp, #12]
 8005ef6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005efa:	3402      	adds	r4, #2
 8005efc:	9305      	str	r3, [sp, #20]
 8005efe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fd4 <_vfiprintf_r+0x22c>
 8005f02:	7821      	ldrb	r1, [r4, #0]
 8005f04:	2203      	movs	r2, #3
 8005f06:	4650      	mov	r0, sl
 8005f08:	f7fa f962 	bl	80001d0 <memchr>
 8005f0c:	b138      	cbz	r0, 8005f1e <_vfiprintf_r+0x176>
 8005f0e:	9b04      	ldr	r3, [sp, #16]
 8005f10:	eba0 000a 	sub.w	r0, r0, sl
 8005f14:	2240      	movs	r2, #64	@ 0x40
 8005f16:	4082      	lsls	r2, r0
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	3401      	adds	r4, #1
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f22:	4829      	ldr	r0, [pc, #164]	@ (8005fc8 <_vfiprintf_r+0x220>)
 8005f24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f28:	2206      	movs	r2, #6
 8005f2a:	f7fa f951 	bl	80001d0 <memchr>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d03f      	beq.n	8005fb2 <_vfiprintf_r+0x20a>
 8005f32:	4b26      	ldr	r3, [pc, #152]	@ (8005fcc <_vfiprintf_r+0x224>)
 8005f34:	bb1b      	cbnz	r3, 8005f7e <_vfiprintf_r+0x1d6>
 8005f36:	9b03      	ldr	r3, [sp, #12]
 8005f38:	3307      	adds	r3, #7
 8005f3a:	f023 0307 	bic.w	r3, r3, #7
 8005f3e:	3308      	adds	r3, #8
 8005f40:	9303      	str	r3, [sp, #12]
 8005f42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f44:	443b      	add	r3, r7
 8005f46:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f48:	e76a      	b.n	8005e20 <_vfiprintf_r+0x78>
 8005f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f4e:	460c      	mov	r4, r1
 8005f50:	2001      	movs	r0, #1
 8005f52:	e7a8      	b.n	8005ea6 <_vfiprintf_r+0xfe>
 8005f54:	2300      	movs	r3, #0
 8005f56:	3401      	adds	r4, #1
 8005f58:	9305      	str	r3, [sp, #20]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	f04f 0c0a 	mov.w	ip, #10
 8005f60:	4620      	mov	r0, r4
 8005f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f66:	3a30      	subs	r2, #48	@ 0x30
 8005f68:	2a09      	cmp	r2, #9
 8005f6a:	d903      	bls.n	8005f74 <_vfiprintf_r+0x1cc>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d0c6      	beq.n	8005efe <_vfiprintf_r+0x156>
 8005f70:	9105      	str	r1, [sp, #20]
 8005f72:	e7c4      	b.n	8005efe <_vfiprintf_r+0x156>
 8005f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f78:	4604      	mov	r4, r0
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e7f0      	b.n	8005f60 <_vfiprintf_r+0x1b8>
 8005f7e:	ab03      	add	r3, sp, #12
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	462a      	mov	r2, r5
 8005f84:	4b12      	ldr	r3, [pc, #72]	@ (8005fd0 <_vfiprintf_r+0x228>)
 8005f86:	a904      	add	r1, sp, #16
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f3af 8000 	nop.w
 8005f8e:	4607      	mov	r7, r0
 8005f90:	1c78      	adds	r0, r7, #1
 8005f92:	d1d6      	bne.n	8005f42 <_vfiprintf_r+0x19a>
 8005f94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f96:	07d9      	lsls	r1, r3, #31
 8005f98:	d405      	bmi.n	8005fa6 <_vfiprintf_r+0x1fe>
 8005f9a:	89ab      	ldrh	r3, [r5, #12]
 8005f9c:	059a      	lsls	r2, r3, #22
 8005f9e:	d402      	bmi.n	8005fa6 <_vfiprintf_r+0x1fe>
 8005fa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fa2:	f7ff fddd 	bl	8005b60 <__retarget_lock_release_recursive>
 8005fa6:	89ab      	ldrh	r3, [r5, #12]
 8005fa8:	065b      	lsls	r3, r3, #25
 8005faa:	f53f af1f 	bmi.w	8005dec <_vfiprintf_r+0x44>
 8005fae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fb0:	e71e      	b.n	8005df0 <_vfiprintf_r+0x48>
 8005fb2:	ab03      	add	r3, sp, #12
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	462a      	mov	r2, r5
 8005fb8:	4b05      	ldr	r3, [pc, #20]	@ (8005fd0 <_vfiprintf_r+0x228>)
 8005fba:	a904      	add	r1, sp, #16
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	f000 f879 	bl	80060b4 <_printf_i>
 8005fc2:	e7e4      	b.n	8005f8e <_vfiprintf_r+0x1e6>
 8005fc4:	080065d4 	.word	0x080065d4
 8005fc8:	080065de 	.word	0x080065de
 8005fcc:	00000000 	.word	0x00000000
 8005fd0:	08005d83 	.word	0x08005d83
 8005fd4:	080065da 	.word	0x080065da

08005fd8 <_printf_common>:
 8005fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	4616      	mov	r6, r2
 8005fde:	4698      	mov	r8, r3
 8005fe0:	688a      	ldr	r2, [r1, #8]
 8005fe2:	690b      	ldr	r3, [r1, #16]
 8005fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	bfb8      	it	lt
 8005fec:	4613      	movlt	r3, r2
 8005fee:	6033      	str	r3, [r6, #0]
 8005ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	460c      	mov	r4, r1
 8005ff8:	b10a      	cbz	r2, 8005ffe <_printf_common+0x26>
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	6033      	str	r3, [r6, #0]
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	0699      	lsls	r1, r3, #26
 8006002:	bf42      	ittt	mi
 8006004:	6833      	ldrmi	r3, [r6, #0]
 8006006:	3302      	addmi	r3, #2
 8006008:	6033      	strmi	r3, [r6, #0]
 800600a:	6825      	ldr	r5, [r4, #0]
 800600c:	f015 0506 	ands.w	r5, r5, #6
 8006010:	d106      	bne.n	8006020 <_printf_common+0x48>
 8006012:	f104 0a19 	add.w	sl, r4, #25
 8006016:	68e3      	ldr	r3, [r4, #12]
 8006018:	6832      	ldr	r2, [r6, #0]
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	42ab      	cmp	r3, r5
 800601e:	dc26      	bgt.n	800606e <_printf_common+0x96>
 8006020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006024:	6822      	ldr	r2, [r4, #0]
 8006026:	3b00      	subs	r3, #0
 8006028:	bf18      	it	ne
 800602a:	2301      	movne	r3, #1
 800602c:	0692      	lsls	r2, r2, #26
 800602e:	d42b      	bmi.n	8006088 <_printf_common+0xb0>
 8006030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006034:	4641      	mov	r1, r8
 8006036:	4638      	mov	r0, r7
 8006038:	47c8      	blx	r9
 800603a:	3001      	adds	r0, #1
 800603c:	d01e      	beq.n	800607c <_printf_common+0xa4>
 800603e:	6823      	ldr	r3, [r4, #0]
 8006040:	6922      	ldr	r2, [r4, #16]
 8006042:	f003 0306 	and.w	r3, r3, #6
 8006046:	2b04      	cmp	r3, #4
 8006048:	bf02      	ittt	eq
 800604a:	68e5      	ldreq	r5, [r4, #12]
 800604c:	6833      	ldreq	r3, [r6, #0]
 800604e:	1aed      	subeq	r5, r5, r3
 8006050:	68a3      	ldr	r3, [r4, #8]
 8006052:	bf0c      	ite	eq
 8006054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006058:	2500      	movne	r5, #0
 800605a:	4293      	cmp	r3, r2
 800605c:	bfc4      	itt	gt
 800605e:	1a9b      	subgt	r3, r3, r2
 8006060:	18ed      	addgt	r5, r5, r3
 8006062:	2600      	movs	r6, #0
 8006064:	341a      	adds	r4, #26
 8006066:	42b5      	cmp	r5, r6
 8006068:	d11a      	bne.n	80060a0 <_printf_common+0xc8>
 800606a:	2000      	movs	r0, #0
 800606c:	e008      	b.n	8006080 <_printf_common+0xa8>
 800606e:	2301      	movs	r3, #1
 8006070:	4652      	mov	r2, sl
 8006072:	4641      	mov	r1, r8
 8006074:	4638      	mov	r0, r7
 8006076:	47c8      	blx	r9
 8006078:	3001      	adds	r0, #1
 800607a:	d103      	bne.n	8006084 <_printf_common+0xac>
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006084:	3501      	adds	r5, #1
 8006086:	e7c6      	b.n	8006016 <_printf_common+0x3e>
 8006088:	18e1      	adds	r1, r4, r3
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	2030      	movs	r0, #48	@ 0x30
 800608e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006092:	4422      	add	r2, r4
 8006094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800609c:	3302      	adds	r3, #2
 800609e:	e7c7      	b.n	8006030 <_printf_common+0x58>
 80060a0:	2301      	movs	r3, #1
 80060a2:	4622      	mov	r2, r4
 80060a4:	4641      	mov	r1, r8
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c8      	blx	r9
 80060aa:	3001      	adds	r0, #1
 80060ac:	d0e6      	beq.n	800607c <_printf_common+0xa4>
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7d9      	b.n	8006066 <_printf_common+0x8e>
	...

080060b4 <_printf_i>:
 80060b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060b8:	7e0f      	ldrb	r7, [r1, #24]
 80060ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060bc:	2f78      	cmp	r7, #120	@ 0x78
 80060be:	4691      	mov	r9, r2
 80060c0:	4680      	mov	r8, r0
 80060c2:	460c      	mov	r4, r1
 80060c4:	469a      	mov	sl, r3
 80060c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ca:	d807      	bhi.n	80060dc <_printf_i+0x28>
 80060cc:	2f62      	cmp	r7, #98	@ 0x62
 80060ce:	d80a      	bhi.n	80060e6 <_printf_i+0x32>
 80060d0:	2f00      	cmp	r7, #0
 80060d2:	f000 80d1 	beq.w	8006278 <_printf_i+0x1c4>
 80060d6:	2f58      	cmp	r7, #88	@ 0x58
 80060d8:	f000 80b8 	beq.w	800624c <_printf_i+0x198>
 80060dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060e4:	e03a      	b.n	800615c <_printf_i+0xa8>
 80060e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ea:	2b15      	cmp	r3, #21
 80060ec:	d8f6      	bhi.n	80060dc <_printf_i+0x28>
 80060ee:	a101      	add	r1, pc, #4	@ (adr r1, 80060f4 <_printf_i+0x40>)
 80060f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	08006161 	.word	0x08006161
 80060fc:	080060dd 	.word	0x080060dd
 8006100:	080060dd 	.word	0x080060dd
 8006104:	080060dd 	.word	0x080060dd
 8006108:	080060dd 	.word	0x080060dd
 800610c:	08006161 	.word	0x08006161
 8006110:	080060dd 	.word	0x080060dd
 8006114:	080060dd 	.word	0x080060dd
 8006118:	080060dd 	.word	0x080060dd
 800611c:	080060dd 	.word	0x080060dd
 8006120:	0800625f 	.word	0x0800625f
 8006124:	0800618b 	.word	0x0800618b
 8006128:	08006219 	.word	0x08006219
 800612c:	080060dd 	.word	0x080060dd
 8006130:	080060dd 	.word	0x080060dd
 8006134:	08006281 	.word	0x08006281
 8006138:	080060dd 	.word	0x080060dd
 800613c:	0800618b 	.word	0x0800618b
 8006140:	080060dd 	.word	0x080060dd
 8006144:	080060dd 	.word	0x080060dd
 8006148:	08006221 	.word	0x08006221
 800614c:	6833      	ldr	r3, [r6, #0]
 800614e:	1d1a      	adds	r2, r3, #4
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	6032      	str	r2, [r6, #0]
 8006154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800615c:	2301      	movs	r3, #1
 800615e:	e09c      	b.n	800629a <_printf_i+0x1e6>
 8006160:	6833      	ldr	r3, [r6, #0]
 8006162:	6820      	ldr	r0, [r4, #0]
 8006164:	1d19      	adds	r1, r3, #4
 8006166:	6031      	str	r1, [r6, #0]
 8006168:	0606      	lsls	r6, r0, #24
 800616a:	d501      	bpl.n	8006170 <_printf_i+0xbc>
 800616c:	681d      	ldr	r5, [r3, #0]
 800616e:	e003      	b.n	8006178 <_printf_i+0xc4>
 8006170:	0645      	lsls	r5, r0, #25
 8006172:	d5fb      	bpl.n	800616c <_printf_i+0xb8>
 8006174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006178:	2d00      	cmp	r5, #0
 800617a:	da03      	bge.n	8006184 <_printf_i+0xd0>
 800617c:	232d      	movs	r3, #45	@ 0x2d
 800617e:	426d      	negs	r5, r5
 8006180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006184:	4858      	ldr	r0, [pc, #352]	@ (80062e8 <_printf_i+0x234>)
 8006186:	230a      	movs	r3, #10
 8006188:	e011      	b.n	80061ae <_printf_i+0xfa>
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	0608      	lsls	r0, r1, #24
 8006190:	f853 5b04 	ldr.w	r5, [r3], #4
 8006194:	d402      	bmi.n	800619c <_printf_i+0xe8>
 8006196:	0649      	lsls	r1, r1, #25
 8006198:	bf48      	it	mi
 800619a:	b2ad      	uxthmi	r5, r5
 800619c:	2f6f      	cmp	r7, #111	@ 0x6f
 800619e:	4852      	ldr	r0, [pc, #328]	@ (80062e8 <_printf_i+0x234>)
 80061a0:	6033      	str	r3, [r6, #0]
 80061a2:	bf14      	ite	ne
 80061a4:	230a      	movne	r3, #10
 80061a6:	2308      	moveq	r3, #8
 80061a8:	2100      	movs	r1, #0
 80061aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ae:	6866      	ldr	r6, [r4, #4]
 80061b0:	60a6      	str	r6, [r4, #8]
 80061b2:	2e00      	cmp	r6, #0
 80061b4:	db05      	blt.n	80061c2 <_printf_i+0x10e>
 80061b6:	6821      	ldr	r1, [r4, #0]
 80061b8:	432e      	orrs	r6, r5
 80061ba:	f021 0104 	bic.w	r1, r1, #4
 80061be:	6021      	str	r1, [r4, #0]
 80061c0:	d04b      	beq.n	800625a <_printf_i+0x1a6>
 80061c2:	4616      	mov	r6, r2
 80061c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80061c8:	fb03 5711 	mls	r7, r3, r1, r5
 80061cc:	5dc7      	ldrb	r7, [r0, r7]
 80061ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061d2:	462f      	mov	r7, r5
 80061d4:	42bb      	cmp	r3, r7
 80061d6:	460d      	mov	r5, r1
 80061d8:	d9f4      	bls.n	80061c4 <_printf_i+0x110>
 80061da:	2b08      	cmp	r3, #8
 80061dc:	d10b      	bne.n	80061f6 <_printf_i+0x142>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	07df      	lsls	r7, r3, #31
 80061e2:	d508      	bpl.n	80061f6 <_printf_i+0x142>
 80061e4:	6923      	ldr	r3, [r4, #16]
 80061e6:	6861      	ldr	r1, [r4, #4]
 80061e8:	4299      	cmp	r1, r3
 80061ea:	bfde      	ittt	le
 80061ec:	2330      	movle	r3, #48	@ 0x30
 80061ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061f6:	1b92      	subs	r2, r2, r6
 80061f8:	6122      	str	r2, [r4, #16]
 80061fa:	f8cd a000 	str.w	sl, [sp]
 80061fe:	464b      	mov	r3, r9
 8006200:	aa03      	add	r2, sp, #12
 8006202:	4621      	mov	r1, r4
 8006204:	4640      	mov	r0, r8
 8006206:	f7ff fee7 	bl	8005fd8 <_printf_common>
 800620a:	3001      	adds	r0, #1
 800620c:	d14a      	bne.n	80062a4 <_printf_i+0x1f0>
 800620e:	f04f 30ff 	mov.w	r0, #4294967295
 8006212:	b004      	add	sp, #16
 8006214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	f043 0320 	orr.w	r3, r3, #32
 800621e:	6023      	str	r3, [r4, #0]
 8006220:	4832      	ldr	r0, [pc, #200]	@ (80062ec <_printf_i+0x238>)
 8006222:	2778      	movs	r7, #120	@ 0x78
 8006224:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	6831      	ldr	r1, [r6, #0]
 800622c:	061f      	lsls	r7, r3, #24
 800622e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006232:	d402      	bmi.n	800623a <_printf_i+0x186>
 8006234:	065f      	lsls	r7, r3, #25
 8006236:	bf48      	it	mi
 8006238:	b2ad      	uxthmi	r5, r5
 800623a:	6031      	str	r1, [r6, #0]
 800623c:	07d9      	lsls	r1, r3, #31
 800623e:	bf44      	itt	mi
 8006240:	f043 0320 	orrmi.w	r3, r3, #32
 8006244:	6023      	strmi	r3, [r4, #0]
 8006246:	b11d      	cbz	r5, 8006250 <_printf_i+0x19c>
 8006248:	2310      	movs	r3, #16
 800624a:	e7ad      	b.n	80061a8 <_printf_i+0xf4>
 800624c:	4826      	ldr	r0, [pc, #152]	@ (80062e8 <_printf_i+0x234>)
 800624e:	e7e9      	b.n	8006224 <_printf_i+0x170>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	f023 0320 	bic.w	r3, r3, #32
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	e7f6      	b.n	8006248 <_printf_i+0x194>
 800625a:	4616      	mov	r6, r2
 800625c:	e7bd      	b.n	80061da <_printf_i+0x126>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	6825      	ldr	r5, [r4, #0]
 8006262:	6961      	ldr	r1, [r4, #20]
 8006264:	1d18      	adds	r0, r3, #4
 8006266:	6030      	str	r0, [r6, #0]
 8006268:	062e      	lsls	r6, r5, #24
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	d501      	bpl.n	8006272 <_printf_i+0x1be>
 800626e:	6019      	str	r1, [r3, #0]
 8006270:	e002      	b.n	8006278 <_printf_i+0x1c4>
 8006272:	0668      	lsls	r0, r5, #25
 8006274:	d5fb      	bpl.n	800626e <_printf_i+0x1ba>
 8006276:	8019      	strh	r1, [r3, #0]
 8006278:	2300      	movs	r3, #0
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	4616      	mov	r6, r2
 800627e:	e7bc      	b.n	80061fa <_printf_i+0x146>
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	1d1a      	adds	r2, r3, #4
 8006284:	6032      	str	r2, [r6, #0]
 8006286:	681e      	ldr	r6, [r3, #0]
 8006288:	6862      	ldr	r2, [r4, #4]
 800628a:	2100      	movs	r1, #0
 800628c:	4630      	mov	r0, r6
 800628e:	f7f9 ff9f 	bl	80001d0 <memchr>
 8006292:	b108      	cbz	r0, 8006298 <_printf_i+0x1e4>
 8006294:	1b80      	subs	r0, r0, r6
 8006296:	6060      	str	r0, [r4, #4]
 8006298:	6863      	ldr	r3, [r4, #4]
 800629a:	6123      	str	r3, [r4, #16]
 800629c:	2300      	movs	r3, #0
 800629e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a2:	e7aa      	b.n	80061fa <_printf_i+0x146>
 80062a4:	6923      	ldr	r3, [r4, #16]
 80062a6:	4632      	mov	r2, r6
 80062a8:	4649      	mov	r1, r9
 80062aa:	4640      	mov	r0, r8
 80062ac:	47d0      	blx	sl
 80062ae:	3001      	adds	r0, #1
 80062b0:	d0ad      	beq.n	800620e <_printf_i+0x15a>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	079b      	lsls	r3, r3, #30
 80062b6:	d413      	bmi.n	80062e0 <_printf_i+0x22c>
 80062b8:	68e0      	ldr	r0, [r4, #12]
 80062ba:	9b03      	ldr	r3, [sp, #12]
 80062bc:	4298      	cmp	r0, r3
 80062be:	bfb8      	it	lt
 80062c0:	4618      	movlt	r0, r3
 80062c2:	e7a6      	b.n	8006212 <_printf_i+0x15e>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4632      	mov	r2, r6
 80062c8:	4649      	mov	r1, r9
 80062ca:	4640      	mov	r0, r8
 80062cc:	47d0      	blx	sl
 80062ce:	3001      	adds	r0, #1
 80062d0:	d09d      	beq.n	800620e <_printf_i+0x15a>
 80062d2:	3501      	adds	r5, #1
 80062d4:	68e3      	ldr	r3, [r4, #12]
 80062d6:	9903      	ldr	r1, [sp, #12]
 80062d8:	1a5b      	subs	r3, r3, r1
 80062da:	42ab      	cmp	r3, r5
 80062dc:	dcf2      	bgt.n	80062c4 <_printf_i+0x210>
 80062de:	e7eb      	b.n	80062b8 <_printf_i+0x204>
 80062e0:	2500      	movs	r5, #0
 80062e2:	f104 0619 	add.w	r6, r4, #25
 80062e6:	e7f5      	b.n	80062d4 <_printf_i+0x220>
 80062e8:	080065e5 	.word	0x080065e5
 80062ec:	080065f6 	.word	0x080065f6

080062f0 <__sflush_r>:
 80062f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f8:	0716      	lsls	r6, r2, #28
 80062fa:	4605      	mov	r5, r0
 80062fc:	460c      	mov	r4, r1
 80062fe:	d454      	bmi.n	80063aa <__sflush_r+0xba>
 8006300:	684b      	ldr	r3, [r1, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	dc02      	bgt.n	800630c <__sflush_r+0x1c>
 8006306:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006308:	2b00      	cmp	r3, #0
 800630a:	dd48      	ble.n	800639e <__sflush_r+0xae>
 800630c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800630e:	2e00      	cmp	r6, #0
 8006310:	d045      	beq.n	800639e <__sflush_r+0xae>
 8006312:	2300      	movs	r3, #0
 8006314:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006318:	682f      	ldr	r7, [r5, #0]
 800631a:	6a21      	ldr	r1, [r4, #32]
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	d030      	beq.n	8006382 <__sflush_r+0x92>
 8006320:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	0759      	lsls	r1, r3, #29
 8006326:	d505      	bpl.n	8006334 <__sflush_r+0x44>
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	1ad2      	subs	r2, r2, r3
 800632c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800632e:	b10b      	cbz	r3, 8006334 <__sflush_r+0x44>
 8006330:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006332:	1ad2      	subs	r2, r2, r3
 8006334:	2300      	movs	r3, #0
 8006336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006338:	6a21      	ldr	r1, [r4, #32]
 800633a:	4628      	mov	r0, r5
 800633c:	47b0      	blx	r6
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	89a3      	ldrh	r3, [r4, #12]
 8006342:	d106      	bne.n	8006352 <__sflush_r+0x62>
 8006344:	6829      	ldr	r1, [r5, #0]
 8006346:	291d      	cmp	r1, #29
 8006348:	d82b      	bhi.n	80063a2 <__sflush_r+0xb2>
 800634a:	4a2a      	ldr	r2, [pc, #168]	@ (80063f4 <__sflush_r+0x104>)
 800634c:	40ca      	lsrs	r2, r1
 800634e:	07d6      	lsls	r6, r2, #31
 8006350:	d527      	bpl.n	80063a2 <__sflush_r+0xb2>
 8006352:	2200      	movs	r2, #0
 8006354:	6062      	str	r2, [r4, #4]
 8006356:	04d9      	lsls	r1, r3, #19
 8006358:	6922      	ldr	r2, [r4, #16]
 800635a:	6022      	str	r2, [r4, #0]
 800635c:	d504      	bpl.n	8006368 <__sflush_r+0x78>
 800635e:	1c42      	adds	r2, r0, #1
 8006360:	d101      	bne.n	8006366 <__sflush_r+0x76>
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	b903      	cbnz	r3, 8006368 <__sflush_r+0x78>
 8006366:	6560      	str	r0, [r4, #84]	@ 0x54
 8006368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800636a:	602f      	str	r7, [r5, #0]
 800636c:	b1b9      	cbz	r1, 800639e <__sflush_r+0xae>
 800636e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006372:	4299      	cmp	r1, r3
 8006374:	d002      	beq.n	800637c <__sflush_r+0x8c>
 8006376:	4628      	mov	r0, r5
 8006378:	f7ff fbf4 	bl	8005b64 <_free_r>
 800637c:	2300      	movs	r3, #0
 800637e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006380:	e00d      	b.n	800639e <__sflush_r+0xae>
 8006382:	2301      	movs	r3, #1
 8006384:	4628      	mov	r0, r5
 8006386:	47b0      	blx	r6
 8006388:	4602      	mov	r2, r0
 800638a:	1c50      	adds	r0, r2, #1
 800638c:	d1c9      	bne.n	8006322 <__sflush_r+0x32>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d0c6      	beq.n	8006322 <__sflush_r+0x32>
 8006394:	2b1d      	cmp	r3, #29
 8006396:	d001      	beq.n	800639c <__sflush_r+0xac>
 8006398:	2b16      	cmp	r3, #22
 800639a:	d11e      	bne.n	80063da <__sflush_r+0xea>
 800639c:	602f      	str	r7, [r5, #0]
 800639e:	2000      	movs	r0, #0
 80063a0:	e022      	b.n	80063e8 <__sflush_r+0xf8>
 80063a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a6:	b21b      	sxth	r3, r3
 80063a8:	e01b      	b.n	80063e2 <__sflush_r+0xf2>
 80063aa:	690f      	ldr	r7, [r1, #16]
 80063ac:	2f00      	cmp	r7, #0
 80063ae:	d0f6      	beq.n	800639e <__sflush_r+0xae>
 80063b0:	0793      	lsls	r3, r2, #30
 80063b2:	680e      	ldr	r6, [r1, #0]
 80063b4:	bf08      	it	eq
 80063b6:	694b      	ldreq	r3, [r1, #20]
 80063b8:	600f      	str	r7, [r1, #0]
 80063ba:	bf18      	it	ne
 80063bc:	2300      	movne	r3, #0
 80063be:	eba6 0807 	sub.w	r8, r6, r7
 80063c2:	608b      	str	r3, [r1, #8]
 80063c4:	f1b8 0f00 	cmp.w	r8, #0
 80063c8:	dde9      	ble.n	800639e <__sflush_r+0xae>
 80063ca:	6a21      	ldr	r1, [r4, #32]
 80063cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063ce:	4643      	mov	r3, r8
 80063d0:	463a      	mov	r2, r7
 80063d2:	4628      	mov	r0, r5
 80063d4:	47b0      	blx	r6
 80063d6:	2800      	cmp	r0, #0
 80063d8:	dc08      	bgt.n	80063ec <__sflush_r+0xfc>
 80063da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ec:	4407      	add	r7, r0
 80063ee:	eba8 0800 	sub.w	r8, r8, r0
 80063f2:	e7e7      	b.n	80063c4 <__sflush_r+0xd4>
 80063f4:	20400001 	.word	0x20400001

080063f8 <_fflush_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	4605      	mov	r5, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	b913      	cbnz	r3, 8006408 <_fflush_r+0x10>
 8006402:	2500      	movs	r5, #0
 8006404:	4628      	mov	r0, r5
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	b118      	cbz	r0, 8006412 <_fflush_r+0x1a>
 800640a:	6a03      	ldr	r3, [r0, #32]
 800640c:	b90b      	cbnz	r3, 8006412 <_fflush_r+0x1a>
 800640e:	f7ff f9af 	bl	8005770 <__sinit>
 8006412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d0f3      	beq.n	8006402 <_fflush_r+0xa>
 800641a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800641c:	07d0      	lsls	r0, r2, #31
 800641e:	d404      	bmi.n	800642a <_fflush_r+0x32>
 8006420:	0599      	lsls	r1, r3, #22
 8006422:	d402      	bmi.n	800642a <_fflush_r+0x32>
 8006424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006426:	f7ff fb9a 	bl	8005b5e <__retarget_lock_acquire_recursive>
 800642a:	4628      	mov	r0, r5
 800642c:	4621      	mov	r1, r4
 800642e:	f7ff ff5f 	bl	80062f0 <__sflush_r>
 8006432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006434:	07da      	lsls	r2, r3, #31
 8006436:	4605      	mov	r5, r0
 8006438:	d4e4      	bmi.n	8006404 <_fflush_r+0xc>
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	059b      	lsls	r3, r3, #22
 800643e:	d4e1      	bmi.n	8006404 <_fflush_r+0xc>
 8006440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006442:	f7ff fb8d 	bl	8005b60 <__retarget_lock_release_recursive>
 8006446:	e7dd      	b.n	8006404 <_fflush_r+0xc>

08006448 <__swhatbuf_r>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	460c      	mov	r4, r1
 800644c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006450:	2900      	cmp	r1, #0
 8006452:	b096      	sub	sp, #88	@ 0x58
 8006454:	4615      	mov	r5, r2
 8006456:	461e      	mov	r6, r3
 8006458:	da0d      	bge.n	8006476 <__swhatbuf_r+0x2e>
 800645a:	89a3      	ldrh	r3, [r4, #12]
 800645c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006460:	f04f 0100 	mov.w	r1, #0
 8006464:	bf14      	ite	ne
 8006466:	2340      	movne	r3, #64	@ 0x40
 8006468:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800646c:	2000      	movs	r0, #0
 800646e:	6031      	str	r1, [r6, #0]
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	b016      	add	sp, #88	@ 0x58
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	466a      	mov	r2, sp
 8006478:	f000 f848 	bl	800650c <_fstat_r>
 800647c:	2800      	cmp	r0, #0
 800647e:	dbec      	blt.n	800645a <__swhatbuf_r+0x12>
 8006480:	9901      	ldr	r1, [sp, #4]
 8006482:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006486:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800648a:	4259      	negs	r1, r3
 800648c:	4159      	adcs	r1, r3
 800648e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006492:	e7eb      	b.n	800646c <__swhatbuf_r+0x24>

08006494 <__smakebuf_r>:
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006498:	079d      	lsls	r5, r3, #30
 800649a:	4606      	mov	r6, r0
 800649c:	460c      	mov	r4, r1
 800649e:	d507      	bpl.n	80064b0 <__smakebuf_r+0x1c>
 80064a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	2301      	movs	r3, #1
 80064aa:	6163      	str	r3, [r4, #20]
 80064ac:	b003      	add	sp, #12
 80064ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b0:	ab01      	add	r3, sp, #4
 80064b2:	466a      	mov	r2, sp
 80064b4:	f7ff ffc8 	bl	8006448 <__swhatbuf_r>
 80064b8:	9f00      	ldr	r7, [sp, #0]
 80064ba:	4605      	mov	r5, r0
 80064bc:	4639      	mov	r1, r7
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff fbbc 	bl	8005c3c <_malloc_r>
 80064c4:	b948      	cbnz	r0, 80064da <__smakebuf_r+0x46>
 80064c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ca:	059a      	lsls	r2, r3, #22
 80064cc:	d4ee      	bmi.n	80064ac <__smakebuf_r+0x18>
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	f043 0302 	orr.w	r3, r3, #2
 80064d6:	81a3      	strh	r3, [r4, #12]
 80064d8:	e7e2      	b.n	80064a0 <__smakebuf_r+0xc>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	6020      	str	r0, [r4, #0]
 80064de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	9b01      	ldr	r3, [sp, #4]
 80064e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80064ea:	b15b      	cbz	r3, 8006504 <__smakebuf_r+0x70>
 80064ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 f81d 	bl	8006530 <_isatty_r>
 80064f6:	b128      	cbz	r0, 8006504 <__smakebuf_r+0x70>
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	431d      	orrs	r5, r3
 8006508:	81a5      	strh	r5, [r4, #12]
 800650a:	e7cf      	b.n	80064ac <__smakebuf_r+0x18>

0800650c <_fstat_r>:
 800650c:	b538      	push	{r3, r4, r5, lr}
 800650e:	4d07      	ldr	r5, [pc, #28]	@ (800652c <_fstat_r+0x20>)
 8006510:	2300      	movs	r3, #0
 8006512:	4604      	mov	r4, r0
 8006514:	4608      	mov	r0, r1
 8006516:	4611      	mov	r1, r2
 8006518:	602b      	str	r3, [r5, #0]
 800651a:	f7fa fdba 	bl	8001092 <_fstat>
 800651e:	1c43      	adds	r3, r0, #1
 8006520:	d102      	bne.n	8006528 <_fstat_r+0x1c>
 8006522:	682b      	ldr	r3, [r5, #0]
 8006524:	b103      	cbz	r3, 8006528 <_fstat_r+0x1c>
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	bd38      	pop	{r3, r4, r5, pc}
 800652a:	bf00      	nop
 800652c:	200003b8 	.word	0x200003b8

08006530 <_isatty_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4d06      	ldr	r5, [pc, #24]	@ (800654c <_isatty_r+0x1c>)
 8006534:	2300      	movs	r3, #0
 8006536:	4604      	mov	r4, r0
 8006538:	4608      	mov	r0, r1
 800653a:	602b      	str	r3, [r5, #0]
 800653c:	f7fa fdb9 	bl	80010b2 <_isatty>
 8006540:	1c43      	adds	r3, r0, #1
 8006542:	d102      	bne.n	800654a <_isatty_r+0x1a>
 8006544:	682b      	ldr	r3, [r5, #0]
 8006546:	b103      	cbz	r3, 800654a <_isatty_r+0x1a>
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	bd38      	pop	{r3, r4, r5, pc}
 800654c:	200003b8 	.word	0x200003b8

08006550 <_sbrk_r>:
 8006550:	b538      	push	{r3, r4, r5, lr}
 8006552:	4d06      	ldr	r5, [pc, #24]	@ (800656c <_sbrk_r+0x1c>)
 8006554:	2300      	movs	r3, #0
 8006556:	4604      	mov	r4, r0
 8006558:	4608      	mov	r0, r1
 800655a:	602b      	str	r3, [r5, #0]
 800655c:	f7fa fdc2 	bl	80010e4 <_sbrk>
 8006560:	1c43      	adds	r3, r0, #1
 8006562:	d102      	bne.n	800656a <_sbrk_r+0x1a>
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	b103      	cbz	r3, 800656a <_sbrk_r+0x1a>
 8006568:	6023      	str	r3, [r4, #0]
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	200003b8 	.word	0x200003b8

08006570 <_init>:
 8006570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006572:	bf00      	nop
 8006574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006576:	bc08      	pop	{r3}
 8006578:	469e      	mov	lr, r3
 800657a:	4770      	bx	lr

0800657c <_fini>:
 800657c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657e:	bf00      	nop
 8006580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006582:	bc08      	pop	{r3}
 8006584:	469e      	mov	lr, r3
 8006586:	4770      	bx	lr
